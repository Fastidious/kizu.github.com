<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kizu.ru</title>
  <link href="http://kizu.ru/en/feed.xml" rel="self"/>
  <link href="http://kizu.ru/en/"/>
  <updated>2017-06-27T00:00:00+03:00</updated>
  <id>http://kizu.ru/en/</id>
  <author>
    <name>Roman Komarov</name>
    <email>kizmarh@ya.ru</email>
  </author>
  <entry>
    <title>Keyboard-Only Focus</title>
    <link href="http://kizu.ru/en/blog/keyboard-only-focus/"/>
    <updated>2017-06-27T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/blog/keyboard-only-focus</id>
    <content type="html">&lt;h1 id=&quot;keyboard-only-focus&quot;&gt;Keyboard-Only Focus&lt;/h1&gt;
&lt;p&gt;One of the things I couldn&amp;#39;t manage to find a solution for a long time was a problem of focus styles on interactive elements. The problem was: when you have an element with some &lt;code&gt;:focus&lt;/code&gt; styles, they&amp;#39;re applied not only to the focused state itself but also after you just click on this element (and it behaves differently for different elements in different browsers, of course).&lt;/p&gt;
&lt;p&gt;What this meant is that whenever you wanted to have some custom element, you would need to compromise in how the focus state would look like, because if you&amp;#39;d make it too bright or distinct from the normal state, users would see it whenever they&amp;#39;d click the elements with those styles. So you&amp;#39;re either getting the too noticeable effect when it is not needed or not enough noticeable effect when it is needed. Accessibility-wise, the former is, of course, better, but what if we could make those styles not to apply when you click at all?&lt;/p&gt;
&lt;p&gt;In this post, I&amp;#39;ll present to you &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#solution&quot; id=&quot;solution&quot;&gt;the solution&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;You can jump straight to &lt;a href=&quot;#final-solution&quot;&gt;the final solution&lt;/a&gt;, but I recommend you to read the whole post anyway in order to better understand it.&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; I had found. It is not perfect, but I think this is enough for us to start making our elements both having a distinct bright focus state and be good looking when users would use a mouse, a trackpad etc.&lt;/p&gt;
&lt;h2 id=&quot;current-state-of-the-problem&quot;&gt;Current State of the Problem&lt;/h2&gt;
&lt;p&gt;To understand the problem better, we should look at how things behave in different browsers for the simplest test case.&lt;/p&gt;
&lt;p&gt;Try to hover, click and switch focus over those controls:&lt;/p&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/blog/keyboard-only-focus/#Demo_1&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#safari&quot; id=&quot;safari&quot;&gt;Browsers&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;Note that the Safari doesn&amp;#39;t get keyboard focus for links by default (you need to enable it in its preferences for this), but still gets the state on click.&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; behave a bit differently there:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Browser&lt;/th&gt;
&lt;th&gt;Button&lt;/th&gt;
&lt;th&gt;Link&lt;/th&gt;
&lt;th&gt;Span&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Chrome&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Edge&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Firefox&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;No&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Safari&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;No&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Yes*&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We can already see that for most elements in all browsers we would get that focused state when we&amp;#39;d click our custom element, while for the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;s in Safari and Firefox we won&amp;#39;t.&lt;/p&gt;
&lt;h2 id=&quot;possible-solution-in-the-specs-&quot;&gt;Possible Solution in the Specs?&lt;/h2&gt;
&lt;p&gt;One thing we should always do when we start experimenting is to see if there is already a solution in current or incoming specifications.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://drafts.csswg.org/selectors-4/#the-focusring-pseudo&quot;&gt;The latest draft of Selectors Level 4&lt;/a&gt; provides us with two new focus-related pseudo-classes: &lt;code&gt;focus-within&lt;/code&gt; and &lt;code&gt;focus-ring&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:focus-within&lt;/code&gt; is essentially a &lt;code&gt;:focus&lt;/code&gt; that works like &lt;code&gt;:hover&lt;/code&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;whenever children of an element would get &lt;code&gt;:focus&lt;/code&gt;, the element would get &lt;code&gt;:focus-within&lt;/code&gt; (and the element would get it when focused itself, of course). I can see how that would be a really useful tool in future, but for our case it&amp;#39;s rather useless (unless we&amp;#39;d try to do some really wild things).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:focus-ring&lt;/code&gt; seems like a tool made specifically for our use-&lt;span class=&quot;nobr&quot;&gt;case —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;it is kinda the old &lt;code&gt;:focus&lt;/code&gt;, but with this added: &lt;q&gt;[…] and the UA determines via heuristics that the focus should be specially indicated on the element&lt;/q&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In theory, &lt;code&gt;:focus-ring&lt;/code&gt; should &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#although&quot; id=&quot;although&quot;&gt;help us&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;Of course, we&amp;#39;d need to implement it using progressive enhancement: declaring all the styles for &lt;code&gt;:focus&lt;/code&gt;, then removing the styles on &lt;code&gt;:not(:focus-ring)&lt;/code&gt;, as otherwise, we would lose in keyboard accessibility at older browsers.&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;: we could use it for keyboard focus styles while leaving the normal &lt;code&gt;:focus&lt;/code&gt; without anything excess. But there are two problems: no browser, as far as I know, supports the property from the spec and only Firefox supports its &lt;code&gt;:-moz-focusring&lt;/code&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-focusring&quot;&gt;old proprietary pseudo-class&lt;/a&gt;, which was a base for a new one. And this pseudo-class is already a bit flawed:&lt;/p&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/blog/keyboard-only-focus/#Demo_2&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;d look at this example in Firefox, it would work properly unless you&amp;#39;d click on a styled span. That&amp;#39;s unfortunate, as while for proper native controls things are ok, I&amp;#39;m sure there would be cases when people would like to have this kind of control over interactive parts of pages that should have the same behavior as the native controls.&lt;/p&gt;
&lt;p&gt;And in other browsers, you shouldn&amp;#39;t see anything there unless someone would already implement the &lt;code&gt;:focus-ring&lt;/code&gt;. If that would &lt;span class=&quot;nobr&quot;&gt;happen —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;tell me and I&amp;#39;ll update this post!&lt;/p&gt;
&lt;h2 id=&quot;my-solution&quot;&gt;My Solution&lt;/h2&gt;
&lt;p&gt;I was playing with one of my favorite &lt;abbr&gt;CSS&lt;/abbr&gt; &lt;span class=&quot;nobr&quot;&gt;properties —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;&lt;code&gt;visibility&lt;/code&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;when I had my “bingo” moment. After validating my idea and seeing it work I was really surprised I didn&amp;#39;t come to this solution before. After some testing, I found out that not everything is so smooth, but more on this later.&lt;/p&gt;
&lt;h3 id=&quot;visibility&quot;&gt;Visibility&lt;/h3&gt;
&lt;p&gt;I think this property deserves its own separate article just to show all the things you can do with it. But for now I&amp;#39;ll briefly tell which its features would be really useful for our case:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Whenever you have an element with &lt;code&gt;visibility: hidden&lt;/code&gt;, you can use &lt;code&gt;visibility: visible&lt;/code&gt; on its children to make them visible.&lt;/li&gt;
&lt;li&gt;Whenever you hide an element using &lt;code&gt;visibility: hidden&lt;/code&gt;, it would not only become visually invisible (like with &lt;code&gt;opacity&lt;/code&gt;), but it wouldn&amp;#39;t also get keyboard focus and wouldn&amp;#39;t be visible to assistive technologies. You can guess that the part about the keyboard focus is what interests us there.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You could already see where all of this leads us to: what if we&amp;#39;ll add another element inside our interactive element, then use &lt;code&gt;visibility: hidden&lt;/code&gt; on the element itself, but then return its contents back with &lt;code&gt;visibility: visible&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;The answer: the element would become accessible only using pointing-and-clicking devices, as clicking on the insides of a hidden element still triggers all the events on it. Of course, that&amp;#39;s not exactly what we need, as we actually need the keyboard focus and don&amp;#39;t want to lose in accessibility in any way.&lt;/p&gt;
&lt;h3 id=&quot;when-to-hide&quot;&gt;When to Hide&lt;/h3&gt;
&lt;p&gt;But then I was wondering: what if we would use this method of hiding-and-showing only when the pointer device is used? The pseudo-classes &lt;code&gt;:hover&lt;/code&gt; and &lt;code&gt;:active&lt;/code&gt; come to mind.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If we&amp;#39;d use &lt;code&gt;:hover&lt;/code&gt; there, everything would work almost as we would intend, but there would be a small issue of when we&amp;#39;d hover an element, and then we&amp;#39;d want to use keyboard navigation, we couldn&amp;#39;t get a focus on this element.&lt;/li&gt;
&lt;li&gt;If we&amp;#39;d use &lt;code&gt;:active&lt;/code&gt;, then things would almost work, but the problem would be that when you call an action on an interactive element using a keyboard, then some browsers actually apply &lt;code&gt;:active&lt;/code&gt; state on this element. The action would pass, but at the same time, we&amp;#39;ll lose the focused state on the element.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After playing a bit with different combinations, the most logical way would be to use both states: &lt;code&gt;:hover:active&lt;/code&gt;. Unless we interact with an element with something that is actually pointing it we won&amp;#39;t trigger this state. With it, our solution would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.Button:active:hover {
    visibility: hidden;
}

:active:hover &amp;gt; .Button-Content {
    visibility: visible;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, in that case, we&amp;#39;d need to move all the visual styling of the button to the inner element, and use the parent element only for layout.&lt;/p&gt;
&lt;p&gt;And then when we&amp;#39;d need to declare all the states like &lt;code&gt;:hover&lt;/code&gt;, &lt;code&gt;:active&lt;/code&gt; and &lt;code&gt;:focus&lt;/code&gt;, we&amp;#39;d need to do them using &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#itsok&quot; id=&quot;itsok&quot;&gt;selectors&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;Note that we don&amp;#39;t need to add the parent&amp;#39;s element class to the state when it is used like &lt;span class=&quot;nobr&quot;&gt;that —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;there are no performance issues due to how the selector matching works in browsers.&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; like &lt;code&gt;:focus &amp;gt; .Button-Content&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here, look at this example (better not in Firefox for now):&lt;/p&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/blog/keyboard-only-focus/#Demo_3&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;#39;re almost there! If you&amp;#39;d look at this example in Chrome or Edge, everything would work perfectly: when you&amp;#39;d click those buttons, they would work and won&amp;#39;t become visibly focused, but you would still be able to focus them from the keyboard and see the focus ring.&lt;/p&gt;
&lt;p&gt;However, there are a few issues in other browsers: Safari and Firefox. In Safari the first button (the one that is made using &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;) would suddenly have the focus state clipped as if the parent button had &lt;code&gt;overflow: hidden&lt;/code&gt; (while this is not the case). This is easily fixed by adding &lt;code&gt;position: relative&lt;/code&gt; on the inner element which somehow fixes &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=173872&quot;&gt;this bug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But in Firefox… Well, our &lt;code&gt;:hover:active&lt;/code&gt; stuff just doesn&amp;#39;t work. And even more to it, if we&amp;#39;d actually listen to the button&amp;#39;s events, then on &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#fxbug&quot; id=&quot;fxbug&quot;&gt;we won&amp;#39;t get&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;I suspect that there is &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1375877&quot;&gt;a related bug in bugzilla&lt;/a&gt; for this, but maybe there are others, feel free to find if some other bug fits better!&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; a &lt;code&gt;click&lt;/code&gt; when we click (and that should be a &lt;em&gt;click&lt;/em&gt;, not a tap!). That only happens when you change the &lt;code&gt;visibility&lt;/code&gt; of a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; on the &lt;code&gt;:active&lt;/code&gt; state.&lt;/p&gt;
&lt;h3 id=&quot;fixing-firefox&quot;&gt;Fixing Firefox&lt;/h3&gt;
&lt;p&gt;After spending a lot of time on trying to find a fix for Firefox, the best fix I could find was this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; itself actually worked as intended always in Firefox, so we don&amp;#39;t need to do anything for it.&lt;/p&gt;
&lt;p&gt; So, only for Firefox, we&amp;#39;d need to restore its visibility for the active state: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;  button.Button:active:not(:-moz-focusring) {
     visibility: inherit;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; Two things to note there:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We&amp;#39;re restoring the &lt;code&gt;visibility&lt;/code&gt; using &lt;code&gt;inherit&lt;/code&gt;, as in all cases when you need to &lt;strong&gt;restore&lt;/strong&gt; the &lt;code&gt;visibility&lt;/code&gt; it&amp;#39;s better to use &lt;code&gt;inherit&lt;/code&gt; instead of &lt;code&gt;visible&lt;/code&gt;, because otherwise inside a &lt;code&gt;visibility: hidden&lt;/code&gt; context we would suddenly make our element visible. In our case, it doesn&amp;#39;t matter much, but it&amp;#39;s just a good practice to get used to.&lt;/li&gt;
&lt;li&gt;For applying styles just for Firefox I&amp;#39;m using the pseudo-class that only Fx &lt;span class=&quot;nobr&quot;&gt;understands —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;&lt;code&gt;:-moz-focusring&lt;/code&gt;, wrapping it with &lt;code&gt;:not()&lt;/code&gt; as that&amp;#39;s the case when we&amp;#39;d want it to work.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For interactive links, spans and other non-button elements we&amp;#39;d need to use our method on &lt;code&gt;:hover&lt;/code&gt;, which is not ideal as I mentioned before, but what can we do? At least, we can add an extra guard not to hide elements on hover when they&amp;#39;re already focused. And we&amp;#39;d also use the same &lt;code&gt;:not(:-moz-focusring)&lt;/code&gt; hack, and it even would make some sense there!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;  .Button:not(button):hover:not(:focus):not(:-moz-focusring) {
      visibility: hidden;
  }

  :not(button):hover:not(:focus):not(:-moz-focusring) &amp;gt; .Button-Content {
      visibility: visible;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; Note that we do this not for buttons, as adding this stuff for them on hover would make them flicker, and we already have native buttons in Fx to behave like we want them to.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;final-solution&quot;&gt;Final Solution&lt;/h3&gt;
&lt;p&gt;With all those fixes, our example would look like this and should work the same in all modern browsers:&lt;/p&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/blog/keyboard-only-focus/#Demo_4&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is an &lt;abbr&gt;HTML&lt;/abbr&gt; &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#similar&quot; id=&quot;similar&quot;&gt;similar&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;Here and in the later &lt;abbr&gt;CSS&lt;/abbr&gt; example I used more simplified classnames and overall changed things a bit for them to be more readable, as well as not mentioning all the reset and visual styles for our buttons.&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; to the one used for this example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;button class=&amp;quot;Button&amp;quot; type=&amp;quot;button&amp;quot; tabindex=&amp;quot;0&amp;quot;&amp;gt;
    &amp;lt;span class=&amp;quot;Button-Content&amp;quot;&amp;gt;
        I&amp;#39;m a button!
    &amp;lt;/span&amp;gt;
&amp;lt;/button&amp;gt;

&amp;lt;a class=&amp;quot;Button&amp;quot; href=&amp;quot;#x&amp;quot; tabindex=&amp;quot;0&amp;quot;&amp;gt;
    &amp;lt;span class=&amp;quot;Button-Content&amp;quot;&amp;gt;
        I&amp;#39;m a link!
    &amp;lt;/span&amp;gt;
&amp;lt;/a&amp;gt;

&amp;lt;span class=&amp;quot;Button&amp;quot; tabindex=&amp;quot;0&amp;quot;&amp;gt;
    &amp;lt;span class=&amp;quot;Button-Content&amp;quot;&amp;gt;
        I&amp;#39;m a span!
    &amp;lt;/span&amp;gt;
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here is the &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#codepen&quot; id=&quot;codepen&quot;&gt;final &lt;abbr&gt;CSS&lt;/abbr&gt;&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;You can see how it works with this literal &lt;abbr&gt;CSS&lt;/abbr&gt; on &lt;a href=&quot;https://codepen.io/kizu/pen/dRZzyP?editors=1100&quot;&gt;this CodePen pen&lt;/a&gt;, without any extra styling (except for &lt;code&gt;all: initial&lt;/code&gt; on buttons).&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; for our method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Making the button not to get keyboard focus on click */
.Button:active:hover {
   visibility: hidden;
}

:active:hover &amp;gt; .Button-Content {
    visibility: visible;
}

/* Fixing the Safari bug for `&amp;lt;button&amp;gt;`s overflow */
.Button-Content {
    position: relative;
}

/* Restoring the default behavior for `&amp;lt;button&amp;gt;` in Fx */
button.Button:active:not(:-moz-focusring) {
   visibility: inherit;
}

/* Using a slightly worse method for Fx on non-focused hover */
.Button:not(button):hover:not(:focus):not(:-moz-focusring) {
    visibility: hidden;
}

:not(button):hover:not(:focus):not(:-moz-focusring) &amp;gt; .Button-Content {
    visibility: visible;
}

/* All the states on the inner element */
:hover &amp;gt; .Button-Content {
    background: blue;
}

:active &amp;gt; .Button-Content {
    background: darkorange;
}

:focus &amp;gt; .Button-Content {
    box-shadow: 0 0 3px 7px lime;
}

/* Removing default outline only after we&amp;#39;ve added our custom one */
.Button:focus {
    outline: none;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;remaining-problems&quot;&gt;Remaining Problems&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;In Firefox we couldn&amp;#39;t get keyboard focus on a non-&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element which is hovered (unless it&amp;#39;s already focused). That&amp;#39;s a bummer, so if that&amp;#39;s critical for you, you could remove the worse method that is there for Fx and/or use only &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;s.&lt;/li&gt;
&lt;li&gt;in IE11 things would work just if we didn&amp;#39;t add our hacks, so we won&amp;#39;t use anything.&lt;/li&gt;
&lt;li&gt;This method needs an extra element and won&amp;#39;t work for &lt;code&gt;&amp;lt;input type=&amp;quot;button&amp;quot;&amp;gt;&lt;/code&gt; obviously (which I don&amp;#39;t recommend using it for buttons anyway) and there is literally nothing bad in adding an extra span when it helps us to fix a problem. Extra divs and spans are not not semantic.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, not a lot of problems after all. If you&amp;#39;ll see anything in the final example in the browser you use, let me know!&lt;/p&gt;
&lt;h2 id=&quot;final-words&quot;&gt;Final Words&lt;/h2&gt;
&lt;p&gt;Now we can use a nice and noticeable keyboard focus state for our interactive elements without compromising in how it would look for others. That&amp;#39;s the thing I tried to fix for years and I don&amp;#39;t even remember the number of attempts I did to fix it. I&amp;#39;m really glad I finally nailed it, and I hope browsers would start supporting the &lt;code&gt;:focus-ring&lt;/code&gt; pseudo-class, and that it would work not only for links and buttons but for any elements that are interactive (even if they were made so with &lt;code&gt;tabindex=&amp;quot;0&amp;quot; etc.&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Thank you for reading.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Label-to-Input States</title>
    <link href="http://kizu.ru/en/blog/label-to-input/"/>
    <updated>2017-05-31T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/blog/label-to-input</id>
    <content type="html">&lt;h1 id=&quot;label-to-input-states&quot;&gt;&lt;span class=&quot;nobr&quot;&gt;Label-to&lt;/span&gt;-Input States&lt;/h1&gt;
&lt;p&gt;When fiddling with inputs &amp;amp; labels for them, I remembered one thing that amused me &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#for-a-long-time&quot; id=&quot;for-a-long-time&quot;&gt;for a long time&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;Fun fact: when I started the research for this article, I found &lt;a href=&quot;https://stackoverflow.com/questions/9098581/why-is-hover-for-input-triggered-on-corresponding-label-in-css&quot;&gt;this question&lt;/a&gt; at StackOverflow, with a really detailed answer by BoltClock. The fun part is that I was the one who asked this question at this far February of the year 2012, and now totally forgot about it. Also, the “Even more” part of this question is still actual for Webkits/Blinks.&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;. Look at this &lt;abbr&gt;HTML&lt;/abbr&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;label&amp;gt;
    Here is an input: 
    &amp;lt;input type=&amp;quot;text&amp;quot; /&amp;gt;
&amp;lt;/label&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The fact that amuses me is that when you declare a state for an input in &lt;abbr&gt;CSS&lt;/abbr&gt;, like with &lt;code&gt;:hover&lt;/code&gt; or &lt;code&gt;:active&lt;/code&gt; pseudo classes, and then you have a label for that input, then triggering those states over the label would actually trigger the same states on the input.&lt;/p&gt;
&lt;p&gt;Here is an excerpt from the &lt;a href=&quot;https://drafts.csswg.org/selectors-4/#the-hover-pseudo&quot;&gt;latest Selectors Level 4 spec&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Document languages may define additional ways in which an element can match :hover. For example, [&lt;abbr&gt;HTML&lt;/abbr&gt;5] defines a labeled control element as matching :hover when its label is hovered.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is a simple example of this behaviour:&lt;/p&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/blog/label-to-input/#Demo_1&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re using any modern browser, you could see the input to be highlighted both when you hover the input itself and the label associated with it.&lt;/p&gt;
&lt;p&gt;The &lt;abbr&gt;CSS&lt;/abbr&gt; for this example is trivial:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;input.example:hover {
  background: lime;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;but-what-about-ancestors-&quot;&gt;But What About Ancestors?&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;d look at that place about the hover in &lt;a href=&quot;https://drafts.csswg.org/selectors-4/#the-hover-pseudo&quot;&gt;the spec&lt;/a&gt;, you&amp;#39;d see the following sentence above:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An element also matches :hover if one of its descendants in the flat tree (including non-element nodes, such as text nodes) matches the above conditions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Which is a thing you could possibly already know: when you hover over a descendant, then this state is also triggered &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#all-of-them&quot; id=&quot;all-of-them&quot;&gt;on all the ancestors&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;Even if the element is out of the ancestor&amp;#39;s bounds, like being positioned or moved outside using some other method, and even if the ancestor would have &lt;code&gt;pointer-events: none&lt;/code&gt; or &lt;code&gt;display: contents&lt;/code&gt;, it still would be marked as the one having the same state as the descendant.&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;, which can be used in a lot of useful ways.&lt;/p&gt;
&lt;p&gt;But what if we have those connected label and input, and the label would be placed not in one of the input&amp;#39;s ancestor&amp;#39;s flat tree?&lt;/p&gt;
&lt;p&gt;Like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;
        Here is
        &amp;lt;label class=&amp;quot;example-label&amp;quot; for=&amp;quot;Example2&amp;quot;&amp;gt;a label&amp;lt;/label&amp;gt;
        for the input inside another list item. Hover it!
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        And here is the input for the above label:
        &amp;lt;input class=&amp;quot;example&amp;quot; id=&amp;quot;Example2&amp;quot; type=&amp;quot;text&amp;quot; /&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And if we&amp;#39;d add the same &lt;abbr&gt;CSS&lt;/abbr&gt; as for the example above, we&amp;#39;d get the same result:&lt;/p&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/blog/label-to-input/#Demo_2&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For now the result is the same. But there is one big difference. Let&amp;#39;s add some styles like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;ul.example3 &amp;gt; li:hover {
    box-shadow: 0 0 0 3px blue;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now look at the following example and try to hover over the input itself and the associated label:&lt;/p&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/blog/label-to-input/#Demo_3&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You should see there that, as probably expected, only the actual list item that is hovered would obtain the above styles. Giving the input the &lt;code&gt;:hover&lt;/code&gt; state using the label trick won&amp;#39;t trigger the &lt;code&gt;:hover&lt;/code&gt; over its parent. All like was written in the specs.&lt;/p&gt;
&lt;p&gt;And what this also means is that as we have this behaviour, the following selector that could look like nonsense at the first glance would actually mean something:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:not(:hover) &amp;gt; input#Example4:hover {
  background: blue;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we&amp;#39;d take our first example and would just wrap an input into a simple span:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;span&amp;gt;&amp;lt;input class=&amp;quot;example&amp;quot; id=&amp;quot;Example4&amp;quot; type=&amp;quot;text&amp;quot; /&amp;gt;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This new selector would actually target &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#not-only&quot; id=&quot;not-only&quot;&gt;only&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;Actually, there is at least one other way to trigger &lt;span class=&quot;nobr&quot;&gt;it —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;by using the developer tools and checking the &lt;code&gt;:hover&lt;/code&gt; state only for the input there. And if you&amp;#39;d find out other cases where this would &lt;span class=&quot;nobr&quot;&gt;work —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;please, report them to me!&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; the hover state of this input that is caused by hovering over label.&lt;/p&gt;
&lt;p&gt;And that means that we can now actually style both hover states in different ways!&lt;/p&gt;
&lt;p&gt;Here is that example working:&lt;/p&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/blog/label-to-input/#Demo_4&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;selecting-siblings&quot;&gt;Selecting Siblings&lt;/h2&gt;
&lt;p&gt;As with a lot of other places in &lt;abbr&gt;CSS&lt;/abbr&gt;, you could research a lot of things surrounding this behaviour. For example, not only the &lt;code&gt;:hover&lt;/code&gt; state can be delegated this way, but also at least the &lt;code&gt;:active&lt;/code&gt; one.&lt;/p&gt;
&lt;p&gt;But I&amp;#39;d like to mention one nuance that could be rather useful, but which is prevented by IE/Edge not supporting it.&lt;/p&gt;
&lt;p&gt;As we saw, the parent is, per spec, won&amp;#39;t get the hover state of such delegated &lt;code&gt;:hover&lt;/code&gt;. But what if we&amp;#39;d want to use this &lt;code&gt;:hover&lt;/code&gt; as a prerequisite to something else? What if we would add a combinator after it and then would try to select some siblings that will come after the input?&lt;/p&gt;
&lt;p&gt;Like this:&lt;/p&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/blog/label-to-input/#Demo_5&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In Firefox and browsers based on Webkit/Blink you could see the link that goes after the input to be highlighted even when you hover the label inside another list item! In Edge, sadly, nothing happens there.&lt;/p&gt;
&lt;p&gt;And, as in the browsers that support it, this behaviour would work even if the input is disabled, we then could hide it using the often used technique (using &lt;code&gt;clip&lt;/code&gt; etc.), and then use labels at one part of the page to highlight stuff at any other part of the page without any JS. What fun could we get out of it?&lt;/p&gt;
&lt;h2 id=&quot;breaking-the-specs-in-the-end&quot;&gt;Breaking the Specs in the End&lt;/h2&gt;
&lt;p&gt;The most &lt;input disabled aria-hidden=&quot;true&quot; class=&quot;lol-example&quot; id=&quot;Example6-5&quot; type=&quot;radio&quot; /&gt;&lt;span class=&quot;example-target&quot;&gt;fun&lt;/span&gt; thing what I found when doing quick experiments &lt;input disabled aria-hidden=&quot;true&quot; class=&quot;lol-example&quot; id=&quot;Example6-6&quot; type=&quot;radio&quot; /&gt;&lt;span class=&quot;example-target&quot;&gt;is&lt;/span&gt; this:&lt;/p&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/blog/label-to-input/#Demo_6&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sadly, there I used the &lt;input disabled aria-hidden=&quot;true&quot; class=&quot;lol-example&quot; id=&quot;Example6-7&quot; type=&quot;radio&quot; /&gt;&lt;span class=&quot;example-target&quot;&gt;forbidden in specs&lt;/span&gt; nesting of labels inside other labels (which we could actually overcome in terms of &lt;em&gt;validity&lt;/em&gt; using either the method for &lt;a href=&quot;/en/fun/nested-links/&quot;&gt;nesting links&lt;/a&gt; or by &lt;abbr&gt;DOM&lt;/abbr&gt; manipulation), which surprisingly works as we&amp;#39;d expect: you hover one (visually) item, and then you get visual feedback from any number of places all over the page.&lt;/p&gt;
&lt;p&gt;Imagine if this would be the thing we could use without hacks and without relying on the &lt;span class=&quot;nobr&quot;&gt;label-to&lt;/span&gt;-input state delegation.&lt;/p&gt;
&lt;p&gt;And here we have it &lt;em&gt;implemented&lt;/em&gt; in some way, so its entirely possible to do in browsers and we&amp;#39;d only need the specs to support it? What do you think, do we need a way to delegate states from one element to another in native &lt;abbr&gt;CSS&lt;/abbr&gt;? If you think that we need, tell your fellow spec writers and/or browser vendors, or even come up with a draft of what it could look like in a spec by yourself!&lt;/p&gt;
&lt;p&gt;There is a &lt;em&gt;chance&lt;/em&gt;, that such stuff would be possible with extensive usage of &lt;code&gt;:has()&lt;/code&gt; (&lt;a href=&quot;https://drafts.csswg.org/selectors-4/#relational&quot;&gt;at the same spec&lt;/a&gt;) if it would be ever implemented, but yeah, only if it would be ever implemented.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Controlling the Specificity</title>
    <link href="http://kizu.ru/en/fun/controlling-the-specificity/"/>
    <updated>2016-12-21T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/fun/controlling-the-specificity</id>
    <content type="html">&lt;h1 id=&quot;controlling-the-specificity&quot;&gt;Controlling the Specificity&lt;/h1&gt;
&lt;p&gt;In &lt;a href=&quot;/en/fun/conditions-for-css-variables/&quot;&gt;the previous article about conditions for &lt;abbr&gt;CSS&lt;/abbr&gt; variables&lt;/a&gt; I talked about things that could be used rather soon, even if the support for them is not there yet. In this article I&amp;#39;ll go even &lt;span class=&quot;nobr&quot;&gt;further —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;I&amp;#39;ll be talking about one thing from the &lt;a href=&quot;https://drafts.csswg.org/selectors-4/&quot;&gt;&lt;abbr&gt;CSS&lt;/abbr&gt; Selectors Level 4&lt;/a&gt;, which is even less adopted.&lt;/p&gt;
&lt;p&gt;The part of this spec I&amp;#39;ll be looking at today is the new, enhanced &lt;code&gt;:not()&lt;/code&gt;. Important disclaimer: the feature I would talk about have almost to no support at the moment (only latest Safari?), and even if it did, I wouldn&amp;#39;t recommend to use it as something other than experiment. You&amp;#39;ll see why. And after discussing what becomes possible with this new &lt;code&gt;:not()&lt;/code&gt; I&amp;#39;ll describe one more usable similar thing and then propose a few things that I think should be there in &lt;abbr&gt;CSS&lt;/abbr&gt; instead.&lt;/p&gt;
&lt;h2 id=&quot;the-all-new-negation-pseudoclass&quot;&gt;The All-New Negation Pseudoclass&lt;/h2&gt;
&lt;p&gt;In Selectors Level 3 &lt;code&gt;:not()&lt;/code&gt; could have only a single simple selector inside of it. The &lt;span class=&quot;nobr&quot;&gt;leveled-up&lt;/span&gt; version allows for so much more!&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://drafts.csswg.org/selectors-4/#negation&quot;&gt;specification for the &lt;code&gt;:not()&lt;/code&gt;&lt;/a&gt; doesn&amp;#39;t say much about its new features. Almost all it says is that instead of a simple selector you can put a &lt;strong&gt;selector list&lt;/strong&gt; inside. But that alone means a lot.&lt;/p&gt;
&lt;h3 id=&quot;selector-lists&quot;&gt;Selector Lists&lt;/h3&gt;
&lt;p&gt;So, now we can use comma-separated selector lists inside any &lt;code&gt;:not()&lt;/code&gt;. The commas in usual comma-separated selector lists are an equivalent of logical &lt;strong&gt;or&lt;/strong&gt;, but when used inside the &lt;code&gt;:not()&lt;/code&gt; they actually become &lt;strong&gt;and&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Look at this &lt;span class=&quot;nobr&quot;&gt;example —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;such selector would target all buttons that are not hovered and not focused &lt;em&gt;at the same time&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;button:not(:hover, :focus)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And it is basically an equivalent of&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;button:not(:hover):not(:focus)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The difference there is how the specificity works for selector lists inside &lt;code&gt;:not()&lt;/code&gt;, here is &lt;a href=&quot;https://drafts.csswg.org/selectors-4/#specificity-rules&quot;&gt;what Spec says&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The specificity of a &lt;code&gt;:not()&lt;/code&gt; pseudo-class is replaced by the specificity of the most specific complex selector in its selector list argument.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That means that the specificity of &lt;code&gt;:not(:hover, :focus)&lt;/code&gt; is the same as the specificity of a single class, so it is really different than if you&amp;#39;d just use multiple &lt;code&gt;:not()&lt;/code&gt;s. You can fit any number of selectors inside a selector list inside &lt;code&gt;:not()&lt;/code&gt;, and you still would get the specificity of only the highest one. And if the specificity would be the same for each selector in a list, you&amp;#39;ll get only this specificity.&lt;/p&gt;
&lt;p&gt;This is a first crucial feature for our case.&lt;/p&gt;
&lt;h3 id=&quot;complex-selectors&quot;&gt;Complex Selectors&lt;/h3&gt;
&lt;p&gt;The second crucial feature is that those selector lists can now contain complex selectors. Before, you could put only a simple selector inside &lt;code&gt;:not()&lt;/code&gt;, but now there won&amp;#39;t be such limit, so you could do stuff like &lt;code&gt;:not(a.foo:nth-child(2n+1):hover)&lt;/code&gt; and it would just work.&lt;/p&gt;
&lt;p&gt;Another interesting thing in &lt;code&gt;:not()&lt;/code&gt; now accepting complex selectors, is that it can also accept selectors with combinators like &lt;code&gt;:not(.foo + .bar)&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;negation-of-negation&quot;&gt;Negation of Negation&lt;/h3&gt;
&lt;p&gt;Of course, since the &lt;code&gt;:not()&lt;/code&gt; selector is itself a complex one, you can now use it inside other &lt;code&gt;:not()&lt;/code&gt;s.&lt;/p&gt;
&lt;p&gt;And, yeah, we&amp;#39;re at the point where the magic would happen. What does double negation mean in logic? It returns the value to its original binary state.&lt;/p&gt;
&lt;p&gt;If we&amp;#39;d have something like that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:not(:not(:hover))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That would work just the same as a &lt;code&gt;:hover&lt;/code&gt; pseudoclass. That&amp;#39;s rather simple. But what would happen if we&amp;#39;d have a selector list there?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:not(:not(:hover), :not(:focus))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As the selector lists inside &lt;code&gt;:not()&lt;/code&gt; work as a logical &lt;strong&gt;and&lt;/strong&gt;, and given that each of the selectors would be returned to its original meaning, the result would be almost the same as &lt;code&gt;:hover:focus&lt;/code&gt;. The difference would be that the specificity of the double negated selector wouldn&amp;#39;t be the same as of the usual complex one. Each of the nested &lt;code&gt;:not()&lt;/code&gt; would have a specificity of a single pseudoclass, and due to how selector lists work inside &lt;code&gt;:not()&lt;/code&gt;, the specificity of the whole construction would be equal, again, to a specificity of a single pseudoclass.&lt;/p&gt;
&lt;h2 id=&quot;reducing-the-specificity&quot;&gt;Reducing the Specificity&lt;/h2&gt;
&lt;p&gt;I think you can already guess what all of this means. That&amp;#39;s &lt;span class=&quot;nobr&quot;&gt;right —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;using the new &lt;code&gt;:not()&lt;/code&gt; we can now write selectors with a specificity of a single class. And, actually, we can write &lt;em&gt;almost any selector&lt;/em&gt; this way.&lt;/p&gt;
&lt;p&gt;So, if we&amp;#39;d like to have a multiclass selector with some states, like &lt;code&gt;.foo.bar.baz:link:hover&lt;/code&gt; and for it to have a specificity of a single class, so it could be easier overridden later on, we could rewrite this selector this way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:not(:not(.foo), :not(.bar), :not(.baz), :not(:link), :not(:hover))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;what-about-combinators-&quot;&gt;What About Combinators?&lt;/h3&gt;
&lt;p&gt;But what if we&amp;#39;d like to have more complex selectors with combinators, like this one?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.foo:hover &amp;gt; .bar .baz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;They&amp;#39;re possible too, but with a slightly more complex code. What would help us is a universal selector. Here is how the selector above could look like if we&amp;#39;d want it to have a specificity of a single class:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:not(:not(:not(:not(:not(:not(.foo), :not(:hover)) &amp;gt; *), :not(.bar)) *), :not(.baz))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That looks awful, right? But &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#works&quot; id=&quot;works&quot;&gt;that works!&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;Here is a &lt;a href=&quot;http://codepen.io/kizu/pen/PbgYNV&quot;&gt;test at CodePen&lt;/a&gt; with this selector, if you&amp;#39;d open it in the latest Safari, you&amp;#39;ll see it in action.&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Of course, it would become a bit readable if we&amp;#39;d use some indentations and stuff:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:not(
    :not(
        :not(
            :not(
                :not(
                    :not(.foo),
                    :not(:hover)
                ) &amp;gt; *
            ),
            :not(.bar)
        ) *
    ),
    :not(.baz)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Still ugly, but manageable (and now, if you&amp;#39;d imagine all of the &lt;code&gt;:not()&lt;/code&gt; and universal selectors would disappear, you could read it almost as our original selector).&lt;/p&gt;
&lt;p&gt;But why it works? Due to how the selector matching mechanism works, the selectors with combinators would match from right to left, so the rightmost selector would be always the one that matches the element we&amp;#39;re testing the &lt;code&gt;:not()&lt;/code&gt; on, so we could safely use just a universal selector instead of it if we need to just check the parents. And the universal selector brings no specificity with it.&lt;/p&gt;
&lt;p&gt;The algorithm beyond rewriting the selector this way is rather simple: we go from right to left, replacing recursively all the parts with the double negations, so for when we have nested combinators, we would have more nested &lt;code&gt;:not()&lt;/code&gt;s. And this way we would always be guaranteed to have the same specificity on each step.&lt;/p&gt;
&lt;h2 id=&quot;complete-control&quot;&gt;Complete Control&lt;/h2&gt;
&lt;p&gt;It worth mentioning that we can already increase the specificity of any given class just by &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#foofoofoo&quot; id=&quot;foofoofoo&quot;&gt;multiplying it&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;You can read about this method in Harry Roberts&amp;#39; &lt;a href=&quot;http://csswizardry.com/2014/07/hacks-for-dealing-with-specificity/#safely-increasing-specificity&quot;&gt;article on specificity hacks&lt;/a&gt; (and, as Harry, I first saw this method in &lt;a href=&quot;https://speakerdeck.com/mathiasbynens/3-dot-14-things-i-didnt-know-about-css-at-css-day-2014&quot;&gt;Mathias Bynens&amp;#39; talk&lt;/a&gt;).&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;, so &lt;code&gt;.foo.foo.foo&lt;/code&gt; matches just the same as &lt;code&gt;.foo&lt;/code&gt;, but with a specificity of three classes. And as we can now both reduce and increase the specificity of almost any given selectors, that means we can, finally, &lt;strong&gt;control&lt;/strong&gt; the specificity of our selectors, regardless of their complexity. Of course, with the exception that we can&amp;#39;t reduce the specificity to be less than the one of the biggest single selector&amp;#39;s one, so we can&amp;#39;t make a selector that contains a class to be as specific as an element selector or a universal one.&lt;/p&gt;
&lt;h2 id=&quot;preprocessors-&quot;&gt;Preprocessors?&lt;/h2&gt;
&lt;p&gt;Yes, it is possible to programmatically convert almost any selector to the same selector with any custom specificity from one class to any given number. But I intentionally won&amp;#39;t implement it now. As I mentioned at the &lt;span class=&quot;nobr&quot;&gt;start —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;the browser support for the new &lt;code&gt;:not()&lt;/code&gt; is not yet there, and even if it would be there, the generated code we&amp;#39;d get for such selectors would be awful. If you&amp;#39;d like a small challenge, you can go and implement it just for fun using any preprocessor or postprocessor you like, but I don&amp;#39;t recommend on using it anywhere close to production.&lt;/p&gt;
&lt;h2 id=&quot;possible-usage&quot;&gt;Possible Usage&lt;/h2&gt;
&lt;p&gt;One of the easiest targets for controlling the specificity are any resets or normalizing &lt;span class=&quot;nobr&quot;&gt;styles —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;right now they often contain things like attribute selectors and pseudoclasses like &lt;code&gt;:nth-child&lt;/code&gt;, and given that those selectors would also have the element selectors, they would always be higher than a single class in specificity, which would make it harder to override it in the code for your blocks.&lt;/p&gt;
&lt;p&gt;For example, you can look at &lt;a href=&quot;https://github.com/necolas/normalize.css/blob/1da0911/normalize.css#L125&quot;&gt;one part&lt;/a&gt; of Nicolas Gallagher&amp;#39;s normalize.css:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/**
 * 1. Remove the bottom border in Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none; /* 1 */
  text-decoration: underline; /* 2 */
  text-decoration: underline dotted; /* 2 */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here if you&amp;#39;d like to have a component that uses &lt;code&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt; and you&amp;#39;d want a border or text-decoration other than underlined, you couldn&amp;#39;t use a single class for this component in your &lt;abbr&gt;CSS&lt;/abbr&gt; alongside using normalize.&lt;span class=&quot;nobr&quot;&gt;css —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;you&amp;#39;d need to override the specificity of two classes instead.&lt;/p&gt;
&lt;p&gt;But if we could reduce the specificity of each selector in our resets and normalizes to the &lt;span class=&quot;nobr&quot;&gt;smallest —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;of a single element or a single &lt;span class=&quot;nobr&quot;&gt;class —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;those tools would become even more powerful and flexible.&lt;/p&gt;
&lt;p&gt;Another area where the control over specificity is a must have are any complex &lt;abbr&gt;CSS&lt;/abbr&gt; methodologies. The easiest example would be Harry Roberts&amp;#39; &lt;a href=&quot;http://itcss.io&quot;&gt;it&lt;abbr&gt;CSS&lt;/abbr&gt;&lt;/a&gt; &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#itcss&quot; id=&quot;itcss&quot;&gt;which&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;There is not much written on it anywhere, if you&amp;#39;d like to read more on it, you can try &lt;a href=&quot;https://www.xfive.co/blog/itcss-scalable-maintainable-css-architecture/&quot;&gt;this article&lt;/a&gt; by Lubos Kmetko.&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; have layers of selectors united by similar area of responsibility. If we could split those layers so they wouldn&amp;#39;t merge in their specificity, we would obtain the ultimate power over &lt;abbr&gt;CSS&lt;/abbr&gt; (ok, I exaggerated it a bit there).&lt;/p&gt;
&lt;p&gt;Our general styles for typography would be always higher in specificity than the resets; our generic objects would always override the typography styles of any complexity; our components would always be guaranteed to override the styles of generic objects; and any utilities would always override anything else, and all without using &lt;code&gt;!important&lt;/code&gt;. And we could even handle things inside each layer by creating sub-layers, to allow modifiers for components to override their base styles even if those base styles are somewhat complex.&lt;/p&gt;
&lt;h3 id=&quot;try-it-today&quot;&gt;Try It Today&lt;/h3&gt;
&lt;p&gt;Talking about all of &lt;span class=&quot;nobr&quot;&gt;this —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;we can already kinda implement our styles this way using nothing but the increasing of specificity available already.&lt;/p&gt;
&lt;p&gt;The algorithm would be simple: for each layer we need to calculate the maximum specificity, then add a number of redundant matching class selectors to each selector in a way they would split all the things into groups.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s say we have an abstract object&amp;#39;s selector: &lt;code&gt;.button:hover&lt;/code&gt;, then a component &lt;code&gt;.MyBlock-Submit&lt;/code&gt;, and, finally, a utility &lt;code&gt;.is-hidden&lt;/code&gt;. We can leave alone the first layer for the object, it would be the most bottom one. Then we calculate that it have two class-level selectors, so we add that number (plus one, to guarantee the override of any possible generic selector there) to each selector of the second layer of components. Then we calculate the specificity of the component layer (here we have just one class initially, in reality, it would be often much larger, plus the three classes from the previous layer, plus one for reliability) and add the corresponding number of redundant class selectors to anything in utility group.&lt;/p&gt;
&lt;p&gt;The easiest (and the one method with the most support) way to add the desired specificity is possible if you have control over the &lt;abbr&gt;HTML&lt;/abbr&gt; of a page: just add a class containing a single underscore to &lt;code&gt;html&lt;/code&gt; &lt;span class=&quot;nobr&quot;&gt;element —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;&lt;code&gt;&amp;lt;html class=&amp;quot;_&amp;quot;&amp;gt;&lt;/code&gt;, and then use the chains of &lt;code&gt;._._&lt;/code&gt; before your selectors. It would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.button:hover {}
._._._ .MyBlock-Submit {}
._._._._._ .is-hidden {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only issue that can happen is that one of the selectors you&amp;#39;re prefixing would have a part that targets a root selector. In case of &lt;code&gt;:root&lt;/code&gt; or &lt;code&gt;html&lt;/code&gt; ones we could rather easily properly attach this part to the actual selector, for more ambiguous selectors we&amp;#39;d need to duplicate it like &lt;code&gt;._._._._.is-hidden, ._._._._ .is-hidden&lt;/code&gt;, though, if you know that you&amp;#39;re doing, you probably wouldn&amp;#39;t want to use any other classes on root.&lt;/p&gt;
&lt;p&gt;And here we have all of the layers separated in a way their order doesn&amp;#39;t matter at all and you could make any layer as complex as you like without the fear of the need to override it later. And yes, you&amp;#39;d still have all the usual &lt;abbr&gt;CSS&lt;/abbr&gt; specificity rules inside of layers if you&amp;#39;d want to use them for more granular control of things.&lt;/p&gt;
&lt;h2 id=&quot;proposal-for-native-tools&quot;&gt;Proposal For Native Tools&lt;/h2&gt;
&lt;p&gt;In this article, I have shown that it would be already possible to set the specificity of any selector to any given number from one class to eternity. This could be used for more fine-grained control over your libraries&amp;#39; code and components, and in my practice, I had numerous occasions where it would be tremendously helpful.&lt;/p&gt;
&lt;p&gt;That&amp;#39;s why I propose to add the necessary tools to native &lt;nobr&gt;&lt;abbr&gt;CSS&lt;/abbr&gt;&amp;#8202;—&lt;/nobr&gt;&amp;#8202;to allow developers to control the specificity. Otherwise, it is possible developers in need would rely on hacks and awful code in the future.&lt;/p&gt;
&lt;p&gt;What exactly I propose? Certainly &lt;strong&gt;not&lt;/strong&gt; something like a pseudoclass for modifying the specificity of a given selector. That would have too complex syntax (how would you pass the specificity to it?) and you&amp;#39;ll need to use this just anywhere when solving your usual &lt;abbr&gt;CSS&lt;/abbr&gt; problems. That&amp;#39;s bad.&lt;/p&gt;
&lt;p&gt;What I&amp;#39;d like to see is some kind of a more general way of controlling the specificity not for specific selectors or rules, but for groups of rules. I think of some kind of an @-rule for it, so you could group any number of rules in a “layer”, then somehow determine the relationships of those layers between themselves, and voilà&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;you&amp;#39;d have a way to control the &lt;em&gt;cascade&lt;/em&gt; itself, the thing that always was out of touch when you were developing your stylesheets.&lt;/p&gt;
&lt;p&gt;And the best &lt;span class=&quot;nobr&quot;&gt;part —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;specificity is a part of &lt;abbr&gt;CSS&lt;/abbr&gt; that is applied only for selectors, it doesn&amp;#39;t depend on &lt;abbr&gt;DOM&lt;/abbr&gt;, on any inheritance there etc. So there shouldn&amp;#39;t be a lot of troubles implementing something that changes the specificity itself (or creates groups of it like it is already there with the different parts of the cascade).&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;&lt;abbr&gt;CSS&lt;/abbr&gt; is fun, and as this article shows, would be really powerful with the tools new Specs would provide. There would be incredible things possible through hacks. There are already hacks like &lt;code&gt;.foo.foo.foo&lt;/code&gt; for modifying the specificity, and those tools can allow us to write and reuse the code that is more effective and maintainable than ever.&lt;/p&gt;
&lt;p&gt;But I&amp;#39;d like to see those things possible not through hacks, but using the native &lt;abbr&gt;CSS&lt;/abbr&gt;. I think this is entirely possible to implement in browsers.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Conditions for CSS Variables</title>
    <link href="http://kizu.ru/en/fun/conditions-for-css-variables/"/>
    <updated>2016-10-21T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/fun/conditions-for-css-variables</id>
    <content type="html">&lt;h1 id=&quot;conditions-for-css-variables&quot;&gt;Conditions for &lt;abbr&gt;CSS&lt;/abbr&gt; Variables&lt;/h1&gt;
&lt;p&gt;I&amp;#39;ll start from this: &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#not-those&quot; id=&quot;not-those&quot;&gt;there are no&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;There is a module named “&lt;a href=&quot;https://www.w3.org/TR/css3-conditional/&quot;&gt;&lt;abbr&gt;CSS&lt;/abbr&gt; Conditional Rules&lt;/a&gt;”, but don&amp;#39;t expect it to cover the &lt;abbr&gt;CSS&lt;/abbr&gt; &lt;span class=&quot;nobr&quot;&gt;variables —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;it covers some &lt;span class=&quot;nobr&quot;&gt;at-rules&lt;/span&gt; stuff. There is even a &lt;a href=&quot;https://tabatkins.github.io/specs/css-when-else/&quot;&gt;proposal&lt;/a&gt; for &lt;code&gt;@when&lt;/code&gt;/&lt;code&gt;@else&lt;/code&gt; &lt;span class=&quot;nobr&quot;&gt;at-rules&lt;/span&gt;, which, again, do not anything in common with variables.&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; conditions in specs to use with &lt;a href=&quot;https://www.w3.org/TR/css-variables-1/&quot;&gt;&lt;abbr&gt;CSS&lt;/abbr&gt; variables&lt;/a&gt;. I think that this is a really big flaw in specs, as while variables already provide a lot of things that were not possible in any other way before, the absence of conditions is really frustrating, as there could be a lot of uses for them.&lt;/p&gt;
&lt;p&gt;But what if we&amp;#39;d need those imaginary conditional statements for our &lt;abbr&gt;CSS&lt;/abbr&gt; variables &lt;em&gt;now&lt;/em&gt;? Well, as with a lot of other &lt;abbr&gt;CSS&lt;/abbr&gt; stuff, we can hack our way around for same cases.&lt;/p&gt;
&lt;h2 id=&quot;the-problem-39-s-definition&quot;&gt;The Problem&amp;#39;s Definition&lt;/h2&gt;
&lt;p&gt;So, what we need is a way to use a single &lt;abbr&gt;CSS&lt;/abbr&gt; variable for setting different &lt;abbr&gt;CSS&lt;/abbr&gt; properties to &lt;em&gt;different&lt;/em&gt; values, but not based directly on this variable (that &lt;span class=&quot;nobr&quot;&gt;is —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;those values shouldn&amp;#39;t be &lt;em&gt;calculated&lt;/em&gt; from our variable). We need &lt;strong&gt;conditions&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;using-calculations-for-binary-conditions&quot;&gt;Using Calculations for Binary Conditions&lt;/h2&gt;
&lt;p&gt;Long story short, I&amp;#39;ll just present the solution to you right now and would explain it later:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:root {
    --is-big: 0;
}

.is-big {
    --is-big: 1;
}

.block {
    padding: calc(
        25px * var(--is-big) +
        10px * (1 - var(--is-big))
    );
    border-width: calc(
        3px * var(--is-big) +
        1px * (1 - var(--is-big))
    );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, we&amp;#39;re making all our elements with &lt;code&gt;.block&lt;/code&gt; to have paddings equal to &lt;code&gt;10px&lt;/code&gt; and border widths to &lt;code&gt;1px&lt;/code&gt; unless the &lt;code&gt;--is-big&lt;/code&gt; variable on those elements won&amp;#39;t be &lt;code&gt;1&lt;/code&gt;, in which case they would become &lt;code&gt;25px&lt;/code&gt; and &lt;code&gt;3px&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;The mechanism beyond this is rather simple: we use both our possible values in a single calculation using &lt;code&gt;calc()&lt;/code&gt;, where we nullify one and keep another value based on the variable&amp;#39;s value which can be either &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt;. In other words, we&amp;#39;ll have &lt;code&gt;25px * 1 + 10px * 0&lt;/code&gt; in one case and &lt;code&gt;25px * 0 + 10px * 1&lt;/code&gt; in another.&lt;/p&gt;
&lt;h2 id=&quot;more-complex-conditions&quot;&gt;More Complex Conditions&lt;/h2&gt;
&lt;p&gt;We can use this method to choose not only from 2 possible values but for choosing from 3 or more values. However, for each new added possible value the calculation becomes more complex. For choosing between 3 possible values it would already look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.block {
    padding: calc(
        100px * (1 - var(--foo)) * (2 - var(--foo)) * 0.5 +
         20px * var(--foo) * (2 - var(--foo)) +
          3px * var(--foo) * (1 - var(--foo)) * -0.5
    );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This could accept &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; values for &lt;code&gt;--foo&lt;/code&gt; variable and calculate the padding to &lt;code&gt;100px&lt;/code&gt;, &lt;code&gt;20px&lt;/code&gt; or &lt;code&gt;3px&lt;/code&gt; correspondingly.&lt;/p&gt;
&lt;p&gt;The principle is the same: we just need to multiply each possible value to an expression that would be equal to &lt;code&gt;1&lt;/code&gt; when the condition for this value is the one we need and to &lt;code&gt;0&lt;/code&gt; in other cases. And this expression can be composed rather easily: we just need to nullify each other possible value of our conditional variable. After doing this we&amp;#39;d need to add our triggering value there to see if we&amp;#39;d need to adjust the result so it would be equal to 1. And that&amp;#39;s it.&lt;/p&gt;
&lt;h3 id=&quot;a-possible-trap-in-the-specs&quot;&gt;A Possible Trap in the Specs&lt;/h3&gt;
&lt;p&gt;With the increasing complexity of such calculations, there is a chance at one point they would stop from working. Why? There is this note in &lt;a href=&quot;https://drafts.csswg.org/css-values-3/#calc-syntax&quot;&gt;specs&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UAs must support calc() expressions of at least 20 terms, where each &lt;abbr&gt;NUMBER&lt;/abbr&gt;, &lt;abbr&gt;DIMENSION&lt;/abbr&gt;, or &lt;abbr&gt;PERCENTAGE&lt;/abbr&gt; is a term. If a calc() expression contains more than the supported number of terms, it must be treated as if it were invalid.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Of course, I tested this a bit and couldn&amp;#39;t found such limitations in the browsers I tested, but there is still a chance either you would write some really complex code that would meet the possible existing limit, or some of the browsers could introduce this limit in the future, so be careful when using really complex calculations.&lt;/p&gt;
&lt;h2 id=&quot;conditions-for-colors&quot;&gt;Conditions for Colors&lt;/h2&gt;
&lt;p&gt;As you can see, those calculations could be used only for things that you can &lt;em&gt;calculate&lt;/em&gt;, so there is no chance we could use it for switching the values of &lt;code&gt;display&lt;/code&gt; property or any other non-numeric ones. But what about colors? Actually, we can calculate the individual components of the colors. Sadly, right now it would work only in Webkits and Blinks, as &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=984021&quot; title=&quot;Bugzilla ticket&quot;&gt;Firefox don&amp;#39;t yet support&lt;/a&gt; &lt;code&gt;calc()&lt;/code&gt; inside &lt;code&gt;rgba()&lt;/code&gt; and other color functions.&lt;/p&gt;
&lt;p&gt;But when the support would be there (or if you&amp;#39;d like to experiment on this in browsers with an existing support), we could do things like that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:root {
    --is-red: 0;
}

.block {
    background: rgba(
        calc(
            255*var(--is-red) +
            0*(1 - var(--is-red))
            ),
        calc(
            0*var(--is-red) +
            255*(1 - var(--is-red))
            ),
        0, 1);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we&amp;#39;d have lime color by default and red if the &lt;code&gt;--is-red&lt;/code&gt; would be set to &lt;code&gt;1&lt;/code&gt; (note that when the component could be zero we could just omit it at all, making out code more compact, here I kept those for clarity of an algorithm).&lt;/p&gt;
&lt;p&gt;As you could do those calculations with any components, it is possible to create those conditions for any colors (and maybe even for gradients? You should try it!).&lt;/p&gt;
&lt;h3 id=&quot;another-trap-in-the-specs&quot;&gt;Another Trap in the Specs&lt;/h3&gt;
&lt;p&gt;When I was testing how the conditions work for colors, I found out a really, &lt;em&gt;really&lt;/em&gt; &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#issue-resolved&quot; id=&quot;issue-resolved&quot;&gt;weird limitation in Specs&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;Tab Atkins &lt;a href=&quot;https://github.com/kizu/kizu.github.com/issues/186&quot;&gt;commented&lt;/a&gt; that this issue with color components was fixed in the specs (but is not yet supported by browsers). Yay! Also he said that as another solution we could just use percentages inside &lt;code&gt;rgba&lt;/code&gt;, I totally forgot about this feature, haha.&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;. It is called &lt;a href=&quot;https://twitter.com/kizmarh/status/788504161864261632&quot;&gt;“Type Checking”&lt;/a&gt;. I now officially hate it. What this means is that if the property accepts only &lt;code&gt;&amp;lt;integer&amp;gt;&lt;/code&gt; as a value, if you&amp;#39;d have any divisions or non-integers inside the &lt;code&gt;calc()&lt;/code&gt; for it, even if the result would be integer, the “resolved type” wouldn&amp;#39;t be &lt;code&gt;&amp;lt;integer&amp;gt;&lt;/code&gt;, it would be &lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;, and that means that those properties won&amp;#39;t accept such values. And when we&amp;#39;d have calculations involving more than two possible values, we&amp;#39;d need to have a non-integer modifiers. And that would make our calculation invalid for using with colors or other integer-only properties (like &lt;code&gt;z-index&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;That is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;calc(255 * (1 - var(--bar)) * (var(--bar) - 2) * -0.5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Would be invalid when inside of the &lt;code&gt;rgba()&lt;/code&gt;. Initially I thought that this behaviour is a bug, especially knowing how the color functions can actually accept the values that go beyond the possible ranges (you can do &lt;code&gt;rgba(9001, +9001, -9001, 42)&lt;/code&gt; and get a valid yellow color), but this typing thing seems to be too hard for browsers to handle.&lt;/p&gt;
&lt;h4 id=&quot;solutions-&quot;&gt;Solutions?&lt;/h4&gt;
&lt;p&gt;There is one far from perfect solution. As in our case we know both the desired value and the problematic modifier, we can pre-calculate them and then round it up. Yep, that means that the resulting value could be not exactly the same, as we would lose some precision in some cases. But it is better than nothing, right?&lt;/p&gt;
&lt;p&gt;But there is another solution that would work for &lt;span class=&quot;nobr&quot;&gt;colors —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;we can use &lt;code&gt;hsla&lt;/code&gt; instead of &lt;code&gt;rgba&lt;/code&gt;, as it accepts not integers, but numbers and percentages, so there won&amp;#39;t be a conflict in type resolving. But for other properties like &lt;code&gt;z-index&lt;/code&gt; that solution won&amp;#39;t work. But even with this method there still could be some losses in precision if you&amp;#39;re going to convert &lt;code&gt;rgb&lt;/code&gt; to &lt;code&gt;hsl&lt;/code&gt;. But those should be less than in previous solution.&lt;/p&gt;
&lt;h2 id=&quot;preprocessing&quot;&gt;Preprocessing&lt;/h2&gt;
&lt;p&gt;When the conditions are binary it is still possible to write them by hand. But when we&amp;#39;re starting to use more complex conditions, or when we&amp;#39;re getting to the colors, we&amp;#39;d better have tools that could make it easier to write. Luckily, we have preprocessors for this purpose.&lt;/p&gt;
&lt;p&gt;Here is how I managed to quickly do it in &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#pen&quot; id=&quot;pen&quot;&gt;Stylus&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;You can look at &lt;a href=&quot;http://codepen.io/kizu/pen/zKmyvG&quot;&gt;CodePen with this code&lt;/a&gt; in action.&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-styl&quot;&gt;conditional($var, $values...)
  $result = &amp;#39;&amp;#39;

  // If there is only an array passed, use its contents
  if length($values) == 1
    $values = $values[0]

  // Validating the values and check if we need to do anything at all
  $type = null
  $equal = true

  for $value, $i in $values
    if $i &amp;gt; 0 and $value != $values[0]
      $equal = false

    $value_type = typeof($value)
    $type = $type || $value_type
    if !($type == &amp;#39;unit&amp;#39; or $type == &amp;#39;rgba&amp;#39;)
      error(&amp;#39;Conditional function can accept only numbers or colors&amp;#39;)

    if $type != $value_type
      error(&amp;#39;Conditional function can accept only same type values&amp;#39;)

  // If all the values are equal, just return one of them
  if $equal
    return $values[0]

  // Handling numbers
  if $type == &amp;#39;unit&amp;#39;
    $result = &amp;#39;calc(&amp;#39;
    $i_count = 0
    for $value, $i in $values
      $multiplier = &amp;#39;&amp;#39;
      $modifier = 1
      $j_count = 0
      for $j in 0..(length($values) - 1)
        if $j != $i
          $j_count = $j_count + 1
          // We could use just the general multiplier,
          // but for 0 and 1 we can simplify it a bit.
          if $j == 0
            $modifier = $modifier * $i
            $multiplier = $multiplier + $var
          else if $j == 1
            $modifier = $modifier * ($j - $i)
            $multiplier = $multiplier + &amp;#39;(1 - &amp;#39; + $var + &amp;#39;)&amp;#39;
          else
            $modifier = $modifier * ($i - $j)
            $multiplier = $multiplier + &amp;#39;(&amp;#39; + $var + &amp;#39; - &amp;#39; + $j + &amp;#39;)&amp;#39;

          if $j_count &amp;lt; length($values) - 1
            $multiplier = $multiplier + &amp;#39; * &amp;#39;

      // If value is zero, just don&amp;#39;t add it there lol
      if $value != 0
        if $modifier != 1
          $multiplier = $multiplier + &amp;#39; * &amp;#39; + (1 / $modifier)
        $result = $result + ($i_count &amp;gt; 0 ? &amp;#39; + &amp;#39; : &amp;#39;&amp;#39;) + $value + &amp;#39; * &amp;#39; + $multiplier
        $i_count = $i_count + 1

    $result = $result + &amp;#39;)&amp;#39;

  // Handling colors
  if $type == &amp;#39;rgba&amp;#39;
    $hues = ()
    $saturations = ()
    $lightnesses = ()
    $alphas = ()

    for $value in $values
      push($hues, unit(hue($value), &amp;#39;&amp;#39;))
      push($saturations, saturation($value))
      push($lightnesses, lightness($value))
      push($alphas, alpha($value))

    $result = &amp;#39;hsla(&amp;#39; + conditional($var, $hues) + &amp;#39;, &amp;#39; + conditional($var, $saturations) + &amp;#39;, &amp;#39; + conditional($var, $lightnesses) + &amp;#39;, &amp;#39; + conditional($var, $alphas) +  &amp;#39;)&amp;#39;

  return unquote($result)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yep, there is a lot of code, but this mixin can generate conditionals both for numbers and colors, and not only for two possible conditions but for many more.&lt;/p&gt;
&lt;p&gt;The usage is really easy:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-styl&quot;&gt;border-width: conditional(var(--foo), 10px, 20px)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first argument is our variable, the second one is the value that should be applied when the variable would be equal to &lt;code&gt;0&lt;/code&gt;, the &lt;span class=&quot;nobr&quot;&gt;third —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;when it would be equal to &lt;code&gt;1&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;This above call would generate proper conditional:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;border-width: calc(10px * (1 - var(--foo)) + 20px * var(--foo));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here is a more complex example for the color conditionals:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-styl&quot;&gt;color: conditional(var(--bar), red, lime, rebeccapurple, orange)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Would generate something that you surely wouldn&amp;#39;t want to write by hand:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;color: hsla(calc(120 * var(--bar) * (var(--bar) - 2) * (var(--bar) - 3) * 0.5 + 270 * var(--bar) * (1 - var(--bar)) * (var(--bar) - 3) * 0.5 + 38.82352941176471 * var(--bar) * (1 - var(--bar)) * (var(--bar) - 2) * -0.16666666666666666), calc(100% * (1 - var(--bar)) * (var(--bar) - 2) * (var(--bar) - 3) * 0.16666666666666666 + 100% * var(--bar) * (var(--bar) - 2) * (var(--bar) - 3) * 0.5 + 49.99999999999999% * var(--bar) * (1 - var(--bar)) * (var(--bar) - 3) * 0.5 + 100% * var(--bar) * (1 - var(--bar)) * (var(--bar) - 2) * -0.16666666666666666), calc(50% * (1 - var(--bar)) * (var(--bar) - 2) * (var(--bar) - 3) * 0.16666666666666666 + 50% * var(--bar) * (var(--bar) - 2) * (var(--bar) - 3) * 0.5 + 40% * var(--bar) * (1 - var(--bar)) * (var(--bar) - 3) * 0.5 + 50% * var(--bar) * (1 - var(--bar)) * (var(--bar) - 2) * -0.16666666666666666), 1);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that there is no detection of &lt;code&gt;&amp;lt;integer&amp;gt;&lt;/code&gt;-accepting properties, so that won&amp;#39;t work for &lt;code&gt;z-index&lt;/code&gt; and such, but it already converts colors to &lt;code&gt;hsla()&lt;/code&gt; to make them manageble (though even this could be enhanced so this convertation would happen only when it would be needed). Another thing I didn&amp;#39;t implement in this mixin (yet?) is the ability to use &lt;abbr&gt;CSS&lt;/abbr&gt; variables for the values. This would be possible for non-integer numbers as those values would be inserted as is in the conditional calculations. Maybe, when I&amp;#39;ll find time, I&amp;#39;ll fix the mixin to accept not only numbers or colors but also variables. For the time being it is still possible to do using the algorithm explained in this article.&lt;/p&gt;
&lt;h2 id=&quot;fallbacks&quot;&gt;Fallbacks&lt;/h2&gt;
&lt;p&gt;Of course, if you&amp;#39;re planning to actually use this, you&amp;#39;ll need to have a way to set fallbacks. They&amp;#39;re easy for browsers that just don&amp;#39;t support variables: you just declare the fallback value before the conditional declaration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.block {
    padding: 100px; /* fallback */
    padding: calc(
        100px * ((1 - var(--foo)) * (2 - var(--foo)) / 2) +
         20px * (var(--foo) * (2 - var(--foo))) +
          3px * (var(--foo) * (1 - var(--foo)) / -2)
    );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But when it comes to colors we have a problem: when there is a support for variables, in fact (and that&amp;#39;s another really weird place in specs), &lt;em&gt;just any&lt;/em&gt; declaration containing variables would be considered valid. And this means that it is not possible in &lt;abbr&gt;CSS&lt;/abbr&gt; to make a fallback for something containing variables:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;background: blue;
background: I 💩 CSS VAR(--I)ABLES;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Is valid &lt;abbr&gt;CSS&lt;/abbr&gt; and per specs, the background would get an &lt;code&gt;initial&lt;/code&gt; value, not the one provided in a fallback (even though it is obvious that the other parts of the value are incorrect).&lt;/p&gt;
&lt;p&gt;So, what we need in order to provide a fallback in those &lt;span class=&quot;nobr&quot;&gt;cases —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;add &lt;code&gt;@support&lt;/code&gt; wrapper that would test the support for everything &lt;strong&gt;except&lt;/strong&gt; for the variables.&lt;/p&gt;
&lt;p&gt;In our case, we need to wrap our conditional colors for Firefox in something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.block {
    color: #f00;
}
@supports (color: rgb(0, calc(0), 0)) {
    .block {
        color: rgba(calc(255 * (1 - var(--foo))), calc(255 * var(--foo)), 0, 1);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we&amp;#39;re testing a support for calculations inside color functions and applying the conditional color only in that case.&lt;/p&gt;
&lt;p&gt;It is also possible to create such fallbacks automatically, but I won&amp;#39;t recommend you to use preprocessors for them as the complexity of creating such stuff is much more than the capabilities preprocessors provide.&lt;/p&gt;
&lt;h2 id=&quot;use-cases&quot;&gt;Use Cases&lt;/h2&gt;
&lt;p&gt;I really don&amp;#39;t like to provide use cases for the things the need for which is obvious. So I&amp;#39;ll be brief. And I&amp;#39;ll state not only the conditions for variables, but also the general conditions, like for the result of &lt;code&gt;calc()&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The conditions for &lt;abbr&gt;CSS&lt;/abbr&gt; variables would be perfect for themifying blocks. This way you could have a number of numbered themes and then apply them to blocks (and nested ones!) using just one &lt;abbr&gt;CSS&lt;/abbr&gt; variable like &lt;code&gt;--block-variant: 1&lt;/code&gt;. This is not something that is possible through any other means other than variables and when you&amp;#39;d want to have different values for different props in different themes, without the conditionals you&amp;#39;d need to have many different variables and apply all of them in every case.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Typography. If it was possible to use the &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;gt;=&lt;/code&gt; in conditions for variables, it would be possible to have a number of “rules” for different font sizes, so you could set different line heights, font weights and other properties based on the given font-size. This is possible now, but now when you need to have some “stops” for those valuea and not just the values derived from &lt;code&gt;em&lt;/code&gt;s.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Responsive design. Well, if there were the conditions for calculations, then it would be almost the same as those elusive “element queries”&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;you could check the &lt;code&gt;vw&lt;/code&gt; or the parent&amp;#39;s widths in percents and decide what to apply in different cases.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There can be other use cases, tell me if you&amp;#39;d find one! I&amp;#39;m sure I had more of them myself, but I don&amp;#39;t have that good of a memory to remember all the things I ever wanted to do with &lt;abbr&gt;CSS&lt;/abbr&gt;. Because its all the things.&lt;/p&gt;
&lt;h2 id=&quot;future&quot;&gt;Future&lt;/h2&gt;
&lt;p&gt;I would really like to see conditions described in &lt;abbr&gt;CSS&lt;/abbr&gt; specs, so we would not rely on calc hacks and could use proper conditions for non-calculatable values too. It is also impossible right now to have conditions other than strict equality, so no “when the variable is more than X” and other stuff like that. I don&amp;#39;t see any reasons why we can&amp;#39;t have proper conditions in &lt;abbr&gt;CSS&lt;/abbr&gt;, so if you know a fellow spec developer, hint them about this issue. My only hope is that they won&amp;#39;t tell us to “just use JS” or find out excuses of why that wouldn&amp;#39;t ever be possible. Here, it is already possible now using the hacks, there can&amp;#39;t be any excuses.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Styling inline code</title>
    <link href="http://kizu.ru/en/blog/styling-inline-code/"/>
    <updated>2016-09-08T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/blog/styling-inline-code</id>
    <content type="html">&lt;h1 id=&quot;styling-inline-code&quot;&gt;Styling inline code&lt;/h1&gt;
&lt;p&gt;When I was working on &lt;a href=&quot;/en/blog/the-new-version-of-this-site/&quot;&gt;my site&amp;#39;s new version&lt;/a&gt;, I tried to think more about how everything should look and read typography-wise. And one of the things I always had problems with was how to style inline code blocks. Most of the time we can see small colorful rectangles in place of them. And the more you put those things inside your text, the worse the reading experience becomes.&lt;/p&gt;
&lt;figure class=&quot;Sidenote-Wrapper&quot;&gt;&lt;figcaption class=&quot;Sidenote&quot;&gt;This example is taken from a &lt;a href=&quot;https://en.wikipedia.org/wiki/Cascading_Style_Sheets#Selector&quot;&gt;Wikipedia article on &lt;abbr&gt;CSS&lt;/abbr&gt;&lt;/a&gt;. Look at all those colorful rectangles. Also, note how some of the things that could be inline code blocks are not marked as such as they surely would introduce even more visual clutter.&lt;/figcaption&gt;&lt;img class=&quot;Sidenote-Context&quot; src=&quot;http://kizu.ru/en/blog/styling-inline-code/example.png&quot; title=&quot;&quot; alt=&quot;Screenshot from Wikipedia&quot;&gt;&lt;/figure&gt;
&lt;p&gt;What if that overused inline code blocks&amp;#39; style is just redundant?&lt;/p&gt;
&lt;p&gt;Almost everything we see there is coming from how the proper multiline code blocks are often presented. But do we really need all those styles in an &lt;em&gt;inline context&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Do we need monospace font?&lt;/strong&gt; Nope. Monospace is useful when we have multiple lines and need to align symbols in a nice way. But inside a regular text? We don&amp;#39;t need it. Go away, monospace font.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Do we need borders and any background color?&lt;/strong&gt; Unlikely. When we have a big single code block they&amp;#39;re ok, but those styles become too bright and eye-catching in an inline context. They make your inline code blocks too &lt;strong&gt;bold&lt;/strong&gt;, and it would worsen the text&amp;#39;s readability, as the eye would pay attention to those bright spots before you&amp;#39;ll read the whole text.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Do we need syntax highlighting?&lt;/strong&gt; I doubt it. It is useful when we have a lot of code and need to separate some things from the other, but when we have only one or two words inside out code blocks, the highlighting is just unnecessary and won&amp;#39;t do anything except for getting more of our attention to it.&lt;/p&gt;
&lt;h2 id=&quot;my-solution&quot;&gt;My Solution&lt;/h2&gt;
&lt;p&gt;So, if all those styles are redundant, or even harmful for our text, what should we use instead? After some thoughts about all those issues, I started to look into how people are styling similar entities in regular books. When it comes to the non-obtrusive way of emphasizing some parts of the text the solution is obvious. &lt;em&gt;Italic&lt;/em&gt;. And if it is useful for the regular texts, why couldn&amp;#39;t we use it for our inline code blocks?&lt;/p&gt;
&lt;figure class=&quot;Sidenote-Wrapper&quot;&gt;&lt;figcaption class=&quot;Sidenote&quot;&gt;My version of the above example now reads better as a text. The bottom inline code blocks, the ones with the whole &lt;abbr&gt;CSS&lt;/abbr&gt; rules, were actually a bit better with the highlighting, so it would be possible to reintroduce it there, but not as brightly as it was before.&lt;/figcaption&gt;&lt;img class=&quot;Sidenote-Context&quot; src=&quot;http://kizu.ru/en/blog/styling-inline-code/solution.png&quot; title=&quot;&quot; alt=&quot;Fixed screenshot from Wikipedia&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Actually, you can look at an inline code block &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#semantics&quot; id=&quot;semantics&quot;&gt;right there&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;Here I used just an &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;, as this post could be seen on &lt;abbr&gt;RSS&lt;/abbr&gt;-readers and in other places where you wouldn&amp;#39;t have the proper code blocks&amp;#39; style like I used for my blog.&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;: &lt;em&gt;font-style: italic&lt;/em&gt;. I think that it look rather &lt;span class=&quot;nobr&quot;&gt;nice —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;unobtrusive, but separate from the regular text.&lt;/p&gt;
&lt;p&gt;Italic separates the code from the other text just fine, in most cases, you won&amp;#39;t need anything else there. The easiest way to make your inline code blocks italic is something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-styl&quot;&gt;:not(pre) &amp;gt; code {
    font: inherit;
    font-style: italic;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This would make your inline code blocks to look like a regular italic text. Note the &lt;code&gt;:not(pre)&lt;/code&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;if you&amp;#39;ll mark your big code blocks using &lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;/code&gt;, this selector won&amp;#39;t match them. Of course, if you&amp;#39;re using some kind of syntax highlighter, you&amp;#39;ll need to disable it (or override its styles) for inline code blocks. In some cases, when you&amp;#39;re using a different web font for the italic, you&amp;#39;ll need to specify this too to not make a faux italic instead, of course.&lt;/p&gt;
&lt;p&gt;There can be some cons for this solution. For example, if you&amp;#39;d want to have some &lt;em&gt;regular emphasis&lt;/em&gt; you&amp;#39;ll have the same style for both it and inline code blocks. But in most cases reader would know the difference from the context and it won&amp;#39;t matter much.&lt;/p&gt;
&lt;h2 id=&quot;yes-it-39-s-all-subjective&quot;&gt;Yes, It&amp;#39;s All Subjective&lt;/h2&gt;
&lt;p&gt;Italic for inline code blocks can be, of course, unusual. But I&amp;#39;m not saying that that&amp;#39;s the only possible solution.
Overall, it is a matter of &lt;span class=&quot;nobr&quot;&gt;style —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;how you would present your inline code blocks. Sometimes you&amp;#39;d want them to pop and bring reader&amp;#39;s attention. But if you&amp;#39;d want to have your texts with a lot of inline code blocks to be more &lt;span class=&quot;nobr&quot;&gt;readable —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;italic could help you.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>The New Version of This Site</title>
    <link href="http://kizu.ru/en/blog/the-new-version-of-this-site/"/>
    <updated>2016-08-13T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/blog/the-new-version-of-this-site</id>
    <content type="html">&lt;h1 id=&quot;the-new-version-of-this-site&quot;&gt;The New Version of This Site&lt;/h1&gt;
&lt;p&gt;Around one and a half month ago, on &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#yep&quot; id=&quot;yep&quot;&gt;June, 23rd&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;Yep, it was more than a month from the publishing of a site till I published this &lt;span class=&quot;nobr&quot;&gt;post —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;I wanted to see how the new site would work in production and fix some things here and there.&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;, I published a new version of my site. Once again. It is rather hard to remember which version number it should be now. If we&amp;#39;d count it from the very start, from the times when I didn&amp;#39;t know how to markup pages properly, this would be the thirteenth version. Or something around that. Of course, that is if we won&amp;#39;t count all the unfinished and trashed versions.&lt;/p&gt;
&lt;h2 id=&quot;a-bit-of-history&quot;&gt;A Bit of History&lt;/h2&gt;
&lt;p&gt;My very first site was uploaded to the internets on the fourth of November 2001. I didn&amp;#39;t know what &lt;abbr&gt;CSS&lt;/abbr&gt; is. At &lt;span class=&quot;nobr&quot;&gt;all —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;the site was made mostly of frames and tables. That site&amp;#39;s content was mostly a bunch of my childish creations. Like custom maps for the Heroes of Might and Magic &lt;abbr&gt;III&lt;/abbr&gt; game, some stupid poetry, some other utter nonsense. The site moved from one of numerous free Russian hostings to another, ending at the “narod.ru” where it stayed for quite a long &lt;span class=&quot;nobr&quot;&gt;time —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;8 different &lt;span class=&quot;nobr&quot;&gt;versions —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;without any resemblance to what you can see on this site today.&lt;/p&gt;
&lt;p&gt;In December 2006, I happened to read all the &lt;abbr&gt;CSS&lt;/abbr&gt; specifications for the first time, and, a bit more than a year after that, in February 2008, I&amp;#39;ve launched a ninth version of my site, this time on my own &lt;span class=&quot;nobr&quot;&gt;domain —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;kizu.ru. At this time I already knew something about how to build web pages, all due to the years of tweaking the styles for LiveJournal, starting from the &lt;abbr&gt;CSS&lt;/abbr&gt; overrides, and finishing with custom templates on LJ&amp;#39;s own templating engine. Therefore, I decided to dedicate my new site to web development, and all my creative stuff could be now found only in my archives and friends-only LiveJournal entries.&lt;/p&gt;
&lt;p&gt;At first, I used &lt;a href=&quot;https://movabletype.org/&quot;&gt;Movable Type&lt;/a&gt; as an engine for kizu.ru. Then, in August 2009, when I went deeper and deeper into front-end web development and learned how to make all the things from scratch, I rewrote the site to be just a set of static &lt;abbr&gt;HTML&lt;/abbr&gt; files. This went until February 2011, when I&amp;#39;ve finally fed up with updating the site manually (using regular expressions and global search-and-replace in my code editor), so I managed to work out some automatization and remade everything I had using &lt;a href=&quot;http://nanoc.ws/&quot;&gt;nanoc&lt;/a&gt; static site generator.&lt;/p&gt;
&lt;p&gt;Another two years passed and on January 17, 2013, I relaunched the whole site once again, this time using &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, with the hosting on &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;. This time though, I rethought the whole site&amp;#39;s design and went deeper into achieving readable typography for the content. That was the previous, twelfth version of my site.&lt;/p&gt;
&lt;h2 id=&quot;thirteenth-version&quot;&gt;Thirteenth Version&lt;/h2&gt;
&lt;h3 id=&quot;engine&quot;&gt;Engine&lt;/h3&gt;
&lt;p&gt;This time, I managed to rewrite everything from scratch. Twice! Jekyll that I endorsed a lot before, started to become too tight for me. When coming from the box (i.e. the version that is there at GitHub Pages) it can&amp;#39;t do too much. Any advanced needs (like some of the typography quirks) could be achieved only by a really hellish code on its Liquid template engine, or by using external ruby plug-ins. I went far beyond what was possible in Liquid (and made some things there I doubt anyone had gone that far to) and was at its limits, and you couldn&amp;#39;t run the ruby plugins on GitHub Pages. And if I&amp;#39;d need to build the site as an extra step and push the built static files, I thought of using something that I&amp;#39;m more familiar &lt;span class=&quot;nobr&quot;&gt;with —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;JS.&lt;/p&gt;
&lt;p&gt;So I chose &lt;a href=&quot;http://docpad.org/&quot;&gt;Docpad&lt;/a&gt;. I almost rewrote the whole site using it, but the farther I went, the longer the build time increased. At one point, when the build time went beyond 90 seconds, I told myself to stop and look at the site with fresh eyes. After some thoughts, after reading both Docpad docs and the docs of different other static site generators, I concluded that nothing that is there on the market would fit my needs. Everywhere I needed more than the projects could allow me to, so, in any case, I&amp;#39;d need to write more than 90% of what I need by myself, without using any external plugins. And that meant fighting with how the static generators were meant to work.&lt;/p&gt;
&lt;p&gt;In the end, I wrote the whole static site generation thing by myself, using gulp as a foundation and reusing some of the custom JS I wrote for the Docpad version. Disclaimer: &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#don-t&quot; id=&quot;don-t&quot;&gt;don&amp;#39;t look into the source&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;&lt;abbr&gt;BTW&lt;/abbr&gt;, I made a &lt;a href=&quot;https://vimeo.com/album/2588576/video/77929464&quot;&gt;short talk&lt;/a&gt; with this exact name.&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;. Everything. Is. Very. Bad. I have learned gulp on the fly, prototyped, experimented. But even this non-optimized and not profiled code runs 10 times faster than what I have managed to get from &lt;span class=&quot;nobr&quot;&gt;Docpad —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;around &lt;span class=&quot;nobr&quot;&gt;8-9&lt;/span&gt; seconds top, with more features and complexity. With watchers, different parts could be rebuilt even faster, and I have plans to add partial rebuilds just for specific posts that would make everything lightning-fast. And it is already much easier to add new features even with the current messy code base.&lt;/p&gt;
&lt;p&gt;Anyway, I&amp;#39;m glad that I went out of using the existing static generators and learned the basics of gulp; maybe one day I&amp;#39;ll separate some parts of my engine so you could reuse it too. But I can&amp;#39;t promise anything there. Maybe at one point I&amp;#39;ll even rewrite everything on something new, like all that fancy react-webpack stuff, who knows! But right now almost everything is fine for me.&lt;/p&gt;
&lt;h3 id=&quot;markup-design-and-typography&quot;&gt;Markup, Design, and Typography&lt;/h3&gt;
&lt;p&gt;You shouldn&amp;#39;t look into the sources of &lt;abbr&gt;CSS&lt;/abbr&gt; too. Most of the styles are there from the previous version of the site, and while some things are rewritten a bit, I&amp;#39;d like to rewrite everything from scratch there again. No, I still like a lot of what I wrote, but the source is dirty, badly structured, don&amp;#39;t look at it. The tastiest stuff would be explained in the &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#i-swear&quot; id=&quot;i-swear&quot;&gt;future posts&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;Yeah, I often overpromise all the new posts, but &lt;em&gt;for once&lt;/em&gt;, I&amp;#39;m going to fulfill it, I swear! :)&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; anyway.&lt;/p&gt;
&lt;p&gt;The design may seem to be the same as it was before at the first glance. But a lot of little details had changed, especially in typography. I&amp;#39;m still using a custom font that I &lt;span class=&quot;nobr&quot;&gt;bought —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;&lt;a href=&quot;http://www.myfonts.com/fonts/letterheadrussia/21-cent/&quot;&gt;21 Cent&lt;/a&gt; by &lt;a href=&quot;http://www.letterhead.ru/&quot;&gt;Letterhead&lt;/a&gt;, but this time, I bought another font style for the headers. I&amp;#39;ve started to use &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#overused&quot; id=&quot;overused&quot;&gt;more OpenType features&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;Maybe even I&amp;#39;ve overused them somewhere just for the sake of demoing them.&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;, added hyphenation, &lt;span class=&quot;nobr&quot;&gt;and —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;oh wow!&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;justified text. And it even looks not that &lt;span class=&quot;nobr&quot;&gt;awful —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;thanks to the hyphenation and enough of available space for the text. Overall, I use a lot of experimental and not optimal stuff there. I&amp;#39;m sure I would change some of those things in the future, and I certanly would drop other things if they would&amp;#39;t work out.&lt;/p&gt;
&lt;h3 id=&quot;content&quot;&gt;Content&lt;/h3&gt;
&lt;p&gt;I have a lot of plans and ideas about what should be there on this site. Right now there are all the same articles that were there before, but I&amp;#39;m removing the unnecessary splitting to all the different categories (they would be there, but just as one of many other filters), and created a &lt;a href=&quot;/en/everything/&quot;&gt;list of everything that I have there&lt;/a&gt; instead, so it would be easier to find an article or an experiment you need. I&amp;#39;m planning to fill it up over time not only with new posts and experiments, but also with different old content that I hadn&amp;#39;t yet published or translated from Russian for some reasons.&lt;/p&gt;
&lt;p&gt;Other than regularily writing new content (hopefully), I would update the basic structure of the site too. There&amp;#39;ll be a regular “about me” section one day, aside from a proper CV, and alongside other interesting new pages.&lt;/p&gt;
&lt;h2 id=&quot;welcome-&quot;&gt;Welcome!&lt;/h2&gt;
&lt;p&gt;Thank you if you managed to read this post till this point. At first, I planned to make just a short post telling you “Hey! Here is a new version!”, but I went rather deep into the site&amp;#39;s history and &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#old-versions&quot; id=&quot;old-versions&quot;&gt;versioning&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;Maybe one day I&amp;#39;ll write more about all the different old versions. When I&amp;#39;ll be ready.&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;, then submerged into the whole double jekyll→docpad→gulp rewrite. In the end, it became a &lt;span class=&quot;nobr&quot;&gt;not-so&lt;/span&gt;-short post, so sorry for that :)&lt;/p&gt;
&lt;p&gt;As always, if you&amp;#39;ll find any typos or mistakes in the texts, or bugs in &lt;span class=&quot;nobr&quot;&gt;markup —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;feel free to write me &lt;a href=&quot;mailto:kizmarh@ya.ru&quot;&gt;an &lt;span class=&quot;nobr&quot;&gt;e-mail&lt;/span&gt;&lt;/a&gt;, fill up an &lt;a href=&quot;https://github.com/kizu/kizu.github.com/issues&quot;&gt;issue at GitHub&lt;/a&gt;, or let me know at &lt;a href=&quot;https://twitter.com/kizmarh&quot;&gt;twitter&lt;/a&gt; anytime. I&amp;#39;ll be glad! If you&amp;#39;d review the design and typography in details and would have any &lt;span class=&quot;nobr&quot;&gt;questions —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;they&amp;#39;re welcome too, of course! While I have plans for future posts, if you would be interested in something specific, I will be happy to elaborate on it, as this would be a nice motivator for me to continue writing.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Nested Links</title>
    <link href="http://kizu.ru/en/fun/nested-links/"/>
    <updated>2015-02-10T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/fun/nested-links</id>
    <content type="html">&lt;h1 id=&quot;nested-links&quot;&gt;Nested Link&lt;span class=&quot;ss01&quot;&gt;s&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;http://kizu.ru/en/fun/nested-links/nested-links.jpg&quot; width=&quot;640&quot; height=&quot;480&quot; alt=&quot;Cats playing nested links&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;
&lt;p&gt;&lt;abbr&gt;HTML&lt;/abbr&gt; specification has a lot of different restrictions. And I have my doubts about the feasibility of many of those. One example which I stumble upon rather &lt;span class=&quot;nobr&quot;&gt;often —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;nested links.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/html5/text-level-semantics.html#the-a-element&quot;&gt;Spec&lt;/a&gt; straightly forbids such nesting:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;strong&gt;a&lt;/strong&gt; element&lt;/p&gt;
&lt;p&gt;[…]&lt;/p&gt;
&lt;p&gt;Content model: transparent, but there must be no &lt;a href=&quot;http://www.w3.org/TR/html5/dom.html#interactive-content-0&quot;&gt;interactive&lt;/a&gt; content descendant.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And if you’d do this, browser’s parser won’t understand you and, as soon as it’d see the opening tag for the nested link, it would close the first one right there:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a href=&amp;quot;#Foo&amp;quot;&amp;gt;
    Foo
    &amp;lt;a href=&amp;quot;#Bar&amp;quot;&amp;gt;
        Bar
    &amp;lt;/a&amp;gt;
    Baz
&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in the eyes of the browser would be something like &lt;span class=&quot;nobr&quot;&gt;that&amp;#8202;—&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a href=&amp;quot;#Foo&amp;quot;&amp;gt;
    Foo
    &amp;lt;/a&amp;gt;&amp;lt;a href=&amp;quot;#Bar&amp;quot;&amp;gt;
        Bar
    &amp;lt;/a&amp;gt;
    Baz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And a live example:&lt;/p&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/fun/nested-links/#Demo_nested-links-broken&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, there are cases when you’d want to nest one link inside another despite the restrictions.&lt;/p&gt;
&lt;p&gt;So, once again, while working on one task I stumbled upon such case. I happen to see and use different workarounds for it before, like an emulation of the nested links with JS (for example, with banal &lt;code&gt;onclick&lt;/code&gt;), or positioning one of the links around the &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#shared-wrapper&quot; id=&quot;shared-wrapper&quot;&gt;shared wrapper&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;Look at &lt;a href=&quot;http://jsfiddle.net/csswizardry/rxsna/&quot;&gt;such solution&lt;/a&gt; by Harry Roberts&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;, but all those workarounds wouldn’t work in all cases, and wouldn’t work perfectly. We’d either lose the nativity of a link, trying to emulate everything from scratch, either won’t be able to make a workaround work just like properly nested elements would.&lt;/p&gt;
&lt;p&gt;So, after trying and weighing all the known workarounds in my head, I found out that I couldn&amp;#39;t solve the current task by any of the workarounds other than full JS emulation. But I stopped and decided to experiment a bit more.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;nobr&quot;&gt;And —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;found a proper solution. &lt;abbr&gt;HTML&lt;/abbr&gt;-only one, by the way, the one that gives you a way to nest any number of links one into another.&lt;/p&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/fun/nested-links/#Demo_nested-links-simple&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a href=&amp;quot;#a&amp;quot;&amp;gt;
    Foo
    &amp;lt;object type=&amp;quot;lol/wut&amp;quot;&amp;gt;
        &amp;lt;a href=&amp;quot;#b&amp;quot;&amp;gt;
            Bar
        &amp;lt;/a&amp;gt;
    &amp;lt;/object&amp;gt;
    Baz
&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we do there is just placing an object between those links. Yep, it works: all parsers of modern browsers suddenly see those links independently, and won’t break your markup anymore. Hooray.&lt;/p&gt;
&lt;h2 id=&quot;why-does-it-work&quot;&gt;Why does it work&lt;/h2&gt;
&lt;p&gt;What are objects, in theory? They are some external entities, with the type set by the &lt;code&gt;type&lt;/code&gt; attribute and the content or a link to it placed into the &lt;code&gt;data&lt;/code&gt; attribute. And the content between the opening and closing &lt;code&gt;object&lt;/code&gt; tags is, &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#update&quot; id=&quot;update&quot;&gt;in fact&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;Actually, see the &lt;a href=&quot;#update-from-2015-03-05&quot;&gt;Update&lt;/a&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;, a fallback, and it would be shown only when browser wouldn’t be capable of displaying the object defined in the attributes. Like, for example, if you won’t have an installed plugin.&lt;/p&gt;
&lt;p&gt;And if you’d write some gibberish &lt;abbr&gt;MIME&lt;/abbr&gt;-type into the &lt;code&gt;type&lt;/code&gt; attribute, a browser wouldn’t understand it and would go straight to displaying the fallback. And, in fact, it would do the same even if you’d omit those “required” attributes at all.&lt;/p&gt;
&lt;p&gt;This way, after wrapping any &lt;abbr&gt;HTML&lt;/abbr&gt; with such attributeless &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; we would get just a wrapper element for this content. But a wrapper with an unusual trait: any content inside of it would be treated by browser’s parser without looking at the object’s context. So, using this trait we can, finally, nest one link into another, separating them for a parser.&lt;/p&gt;
&lt;p&gt;I suppose that this behavior was introduced to browsers because those object fallbacks were mostly used for showing links like “You don’t have our marvelous plugin installed, download it now!” (like, for flash objects). And a lot of developers could use such objects as any other content or &lt;span class=&quot;nobr&quot;&gt;images —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;nesting into all the other tags they had in &lt;abbr&gt;HTML&lt;/abbr&gt;: links, headers, paragraphs, wherever. So, browsers needed this fallback to display properly in those conditions, and they introduced this behavior, so the “webmasters” would be safe from breaking their sites when inserting some copy-and-pasted code for such external objects into their pages.&lt;/p&gt;
&lt;h2 id=&quot;browser-support&quot;&gt;Browser support&lt;/h2&gt;
&lt;p&gt;Not all of the browsers had this behavior from the start.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Internet Explorer began to behave like this only from the 9th version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&quot;nobr&quot;&gt;Firefox —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;from the 4th.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&quot;nobr&quot;&gt;Opera —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;at least from 9th (maybe even &lt;span class=&quot;nobr&quot;&gt;earlier —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;I didn’t dig deeper than that).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&quot;nobr&quot;&gt;Webkits —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;all that I checked: Safari at least from 5.1, &lt;span class=&quot;nobr&quot;&gt;Chrome —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;from 14, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Obviously, the only browsers we’d need to support with such conditions are old IE, all other browsers already behave correctly in all of the widely supported versions.&lt;/p&gt;
&lt;h3 id=&quot;ie-fallback&quot;&gt;IE fallback&lt;/h3&gt;
&lt;p&gt;I don’t know of any easy solution for this problem in old IE. At the very least you could try to fix it somehow by “removing” the nested links using conditional comments:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a href=&amp;quot;…&amp;quot;&amp;gt;
    content of the main link…
    &amp;lt;object&amp;gt;
        &amp;lt;!--[if gte IE 9]&amp;gt;&amp;lt;!--&amp;gt;&amp;lt;a href=&amp;quot;…&amp;quot;&amp;gt;&amp;lt;!--&amp;lt;![endif]--&amp;gt;
            content of the nested link…
        &amp;lt;!--[if gte IE 9]&amp;gt;&amp;lt;!--&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;!--&amp;lt;![endif]--&amp;gt;
    &amp;lt;/object&amp;gt;
&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’d lose some functionality there, but it could be ok for the most cases. &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#try-expressions&quot; id=&quot;try-expressions&quot;&gt;If not&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;Curious ones could think about if it is possible to make a fallback using expressions&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;, you could then insert those links later, separately, using the same conditional comments, or use other workarounds for this problem.&lt;/p&gt;
&lt;h2 id=&quot;is-it-valid-&quot;&gt;Is it valid?&lt;/h2&gt;
&lt;p&gt;Nope, not even close. It is not valid because we don’t have any of the required attributes on an object. We could set some dummy, but &lt;a href=&quot;http://www.w3.org/TR/html5/infrastructure.html#valid-mime-type&quot;&gt;valid mime-type&lt;/a&gt;, like &lt;code&gt;type=&amp;quot;lol/wut&amp;quot;&lt;/code&gt;, and the object itself would then pass the validation, but as soon as we nest the link inside of it, the validator would throw us an error.&lt;/p&gt;
&lt;p&gt;Obviously, a validator is a tool not showing anything but the formal specifications compliance. In our case, the usage of links inside objects is entirely reasonable and won’t break anything for anyone if we’d make things in a proper way.&lt;/p&gt;
&lt;p&gt;More than that, I do not see any reasons at all why specs shouldn’t drop those restrictions and allow us to nest the links. No reasons. None. There are a lot of cases where this is a crucial requirement, and right now all we have are workarounds and “hacks” like this one.&lt;/p&gt;
&lt;h2 id=&quot;usage-examples&quot;&gt;Usage examples&lt;/h2&gt;
&lt;p&gt;At first, I wanted to describe all the possible use cases for the nested links, with live examples and whatnot, but then I remembered that such examples won’t convince anyone who isn’t already convinced. Anyone who ever stumbled upon this problem would have everything they need from the solution above, and others would always be negative about things like that, &lt;em&gt;because specs&lt;/em&gt;. Also: it is very tiring to mark up all those examples, so I’ll just put them into a list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Excerpts from the articles, when the snippet of first few sentences could contain links which you wouldn’t want to strip from the markup.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sidenotes, footnotes, and nested terms are all too can be inside links, why not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Any complex UI with a lot of nested entities, which could happen to be described as links. Those could be tweets in any of the Twitter’s interface, leading to the tweet’s page, but at the same time containing other &lt;span class=&quot;nobr&quot;&gt;links —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;to users, hashtags, and external pages. Those could be mail interfaces, where the snippet of a message in an inbox that should be a link to a message itself could contain other &lt;span class=&quot;nobr&quot;&gt;links —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;attachments, link to threads, labels, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;-&quot;&gt;&lt;em&gt; &lt;/em&gt; *&lt;/h2&gt;
&lt;p&gt;The one thing I’d like to say in the end is that that trick with an object could be applied to any content that you’d like to use somewhere where the specs forbid you to.&lt;/p&gt;
&lt;p&gt;As an example, there are a bunch of new tags in the latest specs that you already should know, like &lt;code&gt;details&lt;/code&gt; and &lt;code&gt;figure&lt;/code&gt;. Guess what: by specs you can use them only in flow-level contexts: you can’t have pictures with captions illustrating some word inside a paragraph, you can’t have a description or footnotes for some words inside a paragraph or a heading (and what other than &lt;code&gt;details&lt;/code&gt; tag would fit for this?), you can’t have a lot of cases that someone doing specs couldn’t think of.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; trick solves all those problems. The question is only if such usage would be feasible for you. And I’d say that a lot of restrictions on specs are useless and ability to work around them, with valid arguments, is priceless.&lt;/p&gt;
&lt;h2 id=&quot;update-from-2015-03-05&quot;&gt;Update from &lt;span class=&quot;nobr&quot;&gt;2015-03&lt;/span&gt;-05&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/VovanR&quot;&gt;Vladimir Rodkin&lt;/a&gt; found out that Firefox’ Flashblock plugin removes “broken objects”, and it treats attributeless &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; as such. Adding unknown mime-type like &lt;code&gt;type=&amp;quot;lol/wut&amp;quot;&lt;/code&gt; fixes this problem and Fx starts to show the object correctly.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Battle for Baseline</title>
    <link href="http://kizu.ru/en/blog/flex-baseline/"/>
    <updated>2014-02-10T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/blog/flex-baseline</id>
    <content type="html">&lt;h1 id=&quot;battle-for-baseline&quot;&gt;Battle for Baseline&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;http://kizu.ru/en/blog/flex-baseline/flex-baseline.jpg&quot; width=&quot;756&quot; height=&quot;478&quot; alt=&quot;Kitties&quot;&gt;&lt;/p&gt;
&lt;p&gt;The best solution for inline blocks were, well, inline-blocks. I used to like them because you could solve a lot of tasks with them. But they&amp;#39;re not ideal. They&amp;#39;re not capable of doing baseline vertical aligning &lt;em&gt;right&lt;/em&gt;. And the problems come straight from the &lt;a href=&quot;http://www.w3.org/TR/CSS2/visudet.html#propdef-vertical-align&quot;&gt;specs&lt;/a&gt;, just read the last two paragraphs to see the problems:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;“The baseline of an &lt;code&gt;inline-block&lt;/code&gt; is the baseline of its &lt;strong&gt;last&lt;/strong&gt; line box in the normal flow.”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“If [&lt;code&gt;inline-block&lt;/code&gt;&amp;#39;s] &lt;code&gt;overflow&lt;/code&gt; property has a computed value other than &lt;code&gt;visible&lt;/code&gt;, [its] baseline is the bottom margin edge.”&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Those rules make only one lined, simple inline-blocks usable with &lt;code&gt;vertical-align: baseline&lt;/code&gt;, in all other complex cases, we would get not what we would need.&lt;/p&gt;
&lt;p&gt;Here is an example: all three blocks have &lt;code&gt;display: inline-block&lt;/code&gt;, the first one is simple oneliner, but with bigger padding, second one is multiline, but has smaller font-size and the third one has &lt;code&gt;overflow: auto&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kizu.ru/en/blog/flex-baseline/examples/flex-baseline1.png&quot; alt=&quot;Screenshot&quot; title=&quot;Screenshot&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;small&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/blog/flex-baseline/#Demo_flex-baseline1&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;You &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#safari&quot; id=&quot;safari&quot;&gt;can see&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;Btw, in the latest Safari the block with &lt;code&gt;overflow&lt;/code&gt; don&amp;#39;t behave according to the specs&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; where each block has its baseline in this example.&lt;/p&gt;
&lt;h2 id=&quot;inline-table&quot;&gt;inline-table&lt;/h2&gt;
&lt;p&gt;Actually, there was one place in &lt;abbr&gt;CSS&lt;/abbr&gt;, where the baseline aligning worked &lt;em&gt;properly&lt;/em&gt;: &lt;code&gt;display: inline-table&lt;/code&gt;. If we&amp;#39;d use it instead of inline-blocks in our example, we&amp;#39;d get almost what we tried to achieve:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kizu.ru/en/blog/flex-baseline/examples/flex-baseline2.png&quot; alt=&quot;Screenshot&quot; title=&quot;Screenshot&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;small&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/blog/flex-baseline/#Demo_flex-baseline2&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;You can see an obvious flaw: the &lt;code&gt;overflow: auto&lt;/code&gt; is not working. And you shouldn&amp;#39;t forget that you&amp;#39;ll need to have &lt;code&gt;table-layout: fixed&lt;/code&gt;. So, &lt;code&gt;inline-table&lt;/code&gt; is nice as long as we don&amp;#39;t need &lt;code&gt;overflow&lt;/code&gt; other than &lt;code&gt;visible&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;trying-flex&quot;&gt;Trying to go flex&lt;/h2&gt;
&lt;p&gt;So, can we do a block both with the proper baseline and with some &lt;code&gt;overflow&lt;/code&gt;? It seems we can, using &lt;span class=&quot;nobr&quot;&gt;flexboxes —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;&lt;code&gt;display: inline-flex&lt;/code&gt;. In &lt;a href=&quot;http://www.w3.org/TR/css3-flexbox/#flex-baselines&quot;&gt;theory&lt;/a&gt;, they have a correct baseline position in all complex cases, but what would we get in practice?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kizu.ru/en/blog/flex-baseline/examples/flex-baseline3.png&quot; alt=&quot;Screenshot&quot; title=&quot;Screenshot&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;small&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/blog/flex-baseline/#Demo_flex-baseline3&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;#39;d look at this example in any browser other than Firefox, you&amp;#39;ll see nicely aligned blocks (yep, even in IE10 and Opera 12).&lt;/p&gt;
&lt;p&gt;But in Fx the block with &lt;code&gt;overflow: auto&lt;/code&gt;, suddenly, behaves just like the inline-&lt;span class=&quot;nobr&quot;&gt;blocks —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;it loses the baseline. So sad, this way we&amp;#39;ll need to wait for this &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=969874&quot;&gt;newly reported bug&lt;/a&gt; to be fixed.&lt;/p&gt;
&lt;h2 id=&quot;another-way&quot;&gt;Is there another way?&lt;/h2&gt;
&lt;p&gt;It is nice we could align &lt;code&gt;inline-flex&lt;/code&gt; blocks with the baselines of other blocks, if only there wasn&amp;#39;t this Fx bug… But what if we&amp;#39;d go and try to align not different &lt;code&gt;inline-flex&lt;/code&gt; blocks, but their children?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kizu.ru/en/blog/flex-baseline/examples/flex-baseline4.png&quot; alt=&quot;Screenshot&quot; title=&quot;Screenshot&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;small&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/blog/flex-baseline/#Demo_flex-baseline4&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;Oh, it works. But… While multiple &lt;code&gt;inline-flex&lt;/code&gt; blocks could wrap on overflow, for elements inside flexbox we would need to use &lt;code&gt;flex-wrap&lt;/code&gt; to wrap them. And guess what? Firefox didn&amp;#39;t support this property until 28.0.&lt;/p&gt;
&lt;h2 id=&quot;combined&quot;&gt;All together&lt;/h2&gt;
&lt;p&gt;But hey! If &lt;code&gt;inline-flex&lt;/code&gt; is properly aligned alongside other blocks and the nested block with &lt;code&gt;overflow: auto&lt;/code&gt; also has a proper baseline, then what if we&amp;#39;d combine those two? We would add another wrapper inside each element, then move all the paddings and overflow to them:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kizu.ru/en/blog/flex-baseline/examples/flex-baseline5.png&quot; alt=&quot;Screenshot&quot; title=&quot;Screenshot&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;small&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/blog/flex-baseline/#Demo_flex-baseline5&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;In most browsers you won&amp;#39;t see any changes, but when we&amp;#39;ll look at Fx, we would see that the blocks now won&amp;#39;t have baseline at their bottom margin edge. But they won&amp;#39;t have it at the proper place &lt;span class=&quot;nobr&quot;&gt;either —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;they&amp;#39;re shifted from the baseline of other blocks a little. Let&amp;#39;s measure &lt;span class=&quot;nobr&quot;&gt;it —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;10 pixels. Hey, it is our padding! By removing paddings from each side we found that the problem is at the top &lt;span class=&quot;nobr&quot;&gt;padding —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;when we remove it everything works great. So, if the bug is in the padding (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=969880&quot;&gt;and I reported it too&lt;/a&gt;), how could we work around it? Let&amp;#39;s remove it and replace with a pseudo-element:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kizu.ru/en/blog/flex-baseline/examples/flex-baseline6.png&quot; alt=&quot;Screenshot&quot; title=&quot;Screenshot&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;small&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/blog/flex-baseline/#Demo_flex-baseline6&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;Perfect!&lt;/p&gt;
&lt;h2 id=&quot;finishing-strokes&quot;&gt;Finishing strokes&lt;/h2&gt;
&lt;p&gt;Well, not perfect. There are two small issues that can appear in IE 10 and Opera 12.&lt;/p&gt;
&lt;p&gt;In IE flexbox with the set width wouldn&amp;#39;t have wrapped text inside of it. That&amp;#39;s a rather strange bug, but we could work around it by adding &lt;code&gt;width: 100%&lt;/code&gt; or &lt;code&gt;-ms-flex-negative: 1&lt;/code&gt; to the inner element, the latter is better.&lt;/p&gt;
&lt;p&gt;Opera has a similar &lt;span class=&quot;nobr&quot;&gt;bug —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;the element inside a flexbox would have the width set to content. The only fix I found is adding &lt;code&gt;flex-direction: column&lt;/code&gt; to flexbox. As there would be only one element inside our wrapper, it won&amp;#39;t affect anything else.&lt;/p&gt;
&lt;p&gt;There, &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#without-fallbacks&quot; id=&quot;without-fallbacks&quot;&gt;now it&amp;#39;s perfect&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;No fallbacks for older browsers though, but this slightly falls out of this post&amp;#39;s scope&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;, there is the last example with different variants of blocks and with the wrapping blocks:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kizu.ru/en/blog/flex-baseline/examples/flex-baseline7.png&quot; alt=&quot;Screenshot&quot; title=&quot;Screenshot&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;small&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/blog/flex-baseline/#Demo_flex-baseline7&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;The resulting code for this example would be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.flex {
    display: -ms-inline-flexbox;
    display: -webkit-inline-flex;
    display: inline-flex;

    /* Fixing Opera issue */
    flex-direction: column;

    vertical-align: baseline;
    }

.flex-content {
    padding: 0 10px 10px;
    border: 1px solid lime;

    /* Fixing IE issue */
    -ms-flex-negative: 1;
    }

/* Fixing Fx issue */
.flex-content:before {
    content: &amp;quot;&amp;quot;;
    display: block;
    padding-top: 10px;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;resume&quot;&gt;Overall&lt;/h2&gt;
&lt;p&gt;Ah, Firefox! Without its bugs (and IE&amp;#39;s one) we could use only one element per block. Also, if you&amp;#39;ll need just multiline inline blocks, and you&amp;#39;re not afraid of tables, you could use &lt;code&gt;display: inline-table&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But, overall, we won. We can now use baseline vertical aligning for blocks of any complexity, hooray! But if you&amp;#39;d want to write even better code in the future, I&amp;#39;d recommend you to go and vote for the &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=969874&quot;&gt;corresponding&lt;/a&gt; &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=969880&quot;&gt;bugs&lt;/a&gt; in Bugzilla.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>New Stylus Features</title>
    <link href="http://kizu.ru/en/issues/new-stylus-features/"/>
    <updated>2013-12-05T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/issues/new-stylus-features</id>
    <content type="html">&lt;h1 id=&quot;new-stylus-features&quot;&gt;New Stylus Features&lt;/h1&gt;
&lt;p&gt;Not so long ago I &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#maintaining&quot; id=&quot;maintaining&quot;&gt;became a maintainer&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;I&amp;#39;ll write someday later how this happened and what exactly I do there, but it worth to mention that I&amp;#39;m &lt;em&gt;a maintainer&lt;/em&gt;, but the main &lt;em&gt;developer&lt;/em&gt; now is my colleague &lt;a href=&quot;gh:panya&quot;&gt;Mikhail Korepanov&lt;/a&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; for &lt;a href=&quot;https://github.com/LearnBoost/stylus&quot;&gt;Stylus&lt;/a&gt; &lt;abbr&gt;CSS&lt;/abbr&gt; preprocessor. At the end of the last week, we released a new &lt;span class=&quot;nobr&quot;&gt;version —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;&lt;a href=&quot;https://github.com/LearnBoost/stylus/blob/master/History.md#0410--2013-11-30&quot;&gt;0.41.0&lt;/a&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;where we added some new features. And in the two earlier releases we added support for the hashes and polished it, so after all this work it is now possible to do a lot of interesting new things. In this article, I&amp;#39;ll explain one &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#example-sidenote&quot; id=&quot;example-sidenote&quot;&gt;new tech&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;You can go straight to &lt;a href=&quot;#example&quot;&gt;its &lt;span class=&quot;nobr&quot;&gt;step-by&lt;/span&gt;-step explanation&lt;/a&gt;, or to the &lt;a href=&quot;#result&quot;&gt;resulting code&lt;/a&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; that is now possible in the new Stylus, but I&amp;#39;ll describe the new features for a start.&lt;/p&gt;
&lt;h2 id=&quot;block-mixins&quot;&gt;Block mixins&lt;/h2&gt;
&lt;p&gt;Finally! The thing that was missing from Stylus for so &lt;span class=&quot;nobr&quot;&gt;long —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;the ability to pass blocks of Stylus code into mixins and then use those blocks inside the mixins&amp;#39; bodies.&lt;/p&gt;
&lt;p&gt;The syntax for passing the block is rather simple: we call a mixin using a &lt;code&gt;+&lt;/code&gt; prefix, then we pass the block either in the curly braces, or using a new indent level (as you could do with a lot of things in Stylus):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-styl&quot;&gt;+foo()
  // The block we want to pass
  width: 10px
  height: 10px
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After we passed the block to the mixin, this block becomes available inside of it as a named &lt;span class=&quot;nobr&quot;&gt;argument —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;&lt;code&gt;block&lt;/code&gt;. You can then use it anywhere inside the mixin using &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#block-call&quot; id=&quot;block-call&quot;&gt;an interpolation&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;There is a possibility we would add a way of using it without interpolation in the future though&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-styl&quot;&gt;foo()
  width: 20px
  .foo
    {block}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or we could pass this as a variable to the next mixin, or use it in any other way.&lt;/p&gt;
&lt;p&gt;Anyway, if you&amp;#39;ve called a mixin above like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-styl&quot;&gt;.bar
  +foo()
    padding: 0
    .baz
      height: 20px
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You would get this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.bar {
  width: 20px;
}
.bar .foo {
  padding: 0;
}
.bar .foo .baz {
  height: 20px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With block mixins, we have a way of wrapping blocks with mixins and then wrapping them with anything. This feature is often used for handling media queries, and my example that you&amp;#39;ll see later in this article is also from the &lt;abbr&gt;RWD&lt;/abbr&gt; area.&lt;/p&gt;
&lt;h2 id=&quot;hashes&quot;&gt;Hashes&lt;/h2&gt;
&lt;p&gt;As I already mentioned, in the latest releases of Stylus we added (and polished to a usable state) hashes as a data type. Hashes are objects with key-value pairs, and they look rather simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;foo = {
  bar: 10px,
  raz: #fff,
  baz: {
    blah: blah
    &amp;#39;10%&amp;#39;: yeah
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see from this example, the syntax is similar to the objects in JavaScript: the key could be either an indent or a string, and anything could go into value, even nested hashes. An important part: while you can use ordinary blocks with or without curly braces in Stylus, they are mandatory for hashes, while the trailing commas &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#codestyle&quot; id=&quot;codestyle&quot;&gt;are not&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;And as with all other optional syntax features of Stylus, you should use a consistent code style in your stylesheets. Otherwise your code would be messy as hell&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Then, after you defined a hash, you could add new properties to it or redefine old ones using dots or square brackets:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-styl&quot;&gt;foo.bar = 20px
foo[&amp;#39;whatever&amp;#39;] = &amp;#39;hello&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The differences are simple: while you could use only idents with the dot syntax, with square brackets you could pass any string containing any symbols, or use a variable instead. So, the brackets are more flexible, while the dot is not.&lt;/p&gt;
&lt;p&gt;You can get the values from the hash in the same &lt;span class=&quot;nobr&quot;&gt;way —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;either by using a dot or using the square brackets.&lt;/p&gt;
&lt;p&gt;I won&amp;#39;t describe &lt;a href=&quot;http://learnboost.github.io/stylus/docs/hashes.html&quot;&gt;all the features&lt;/a&gt; of the hashes, I&amp;#39;ll just mention that you can use the &lt;span class=&quot;nobr&quot;&gt;built-in&lt;/span&gt; &lt;code&gt;length()&lt;/code&gt; function with them, you can iterate through them, use them in conditions (&lt;code&gt;if baz in foo&lt;/code&gt;), and there are also some &lt;span class=&quot;nobr&quot;&gt;built-in&lt;/span&gt; functions to work with hashes (&lt;code&gt;keys()&lt;/code&gt;, &lt;code&gt;values()&lt;/code&gt;, &lt;code&gt;merge()&lt;/code&gt;). And you can interpolate hashes into &lt;abbr&gt;CSS&lt;/abbr&gt;.&lt;/p&gt;
&lt;h2 id=&quot;selector&quot;&gt;&lt;code&gt;selector()&lt;/code&gt; function&lt;/h2&gt;
&lt;p&gt;There is now one small but important feature in &lt;span class=&quot;nobr&quot;&gt;Stylus —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;&lt;code&gt;selector()&lt;/code&gt;. While you can construct complex selectors in Stylus by using nested blocks, interpolations, mixins and other things, you couldn&amp;#39;t &lt;strong&gt;get&lt;/strong&gt; the compiled selector, they only existed in the compiled &lt;abbr&gt;CSS&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;But now, using &lt;code&gt;selector()&lt;/code&gt; function that returns the currently compiled selector, you could do a lot of useful things, like check the selector for something using the &lt;code&gt;match()&lt;/code&gt; function, or use it for something else. It is already very useful, and it would become even more so in future releases.&lt;/p&gt;
&lt;p&gt;As an example, you can take this small chunk of code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-styl&quot;&gt;if match(&amp;#39;:(before|after)&amp;#39;, selector())
  content: &amp;#39;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we check if the selector has any pseudo-elements in it and if &lt;span class=&quot;nobr&quot;&gt;so —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;we apply the &lt;code&gt;content&lt;/code&gt;. This could be useful if we have some mixin, containing styles that could be applied both to a normal element and to a pseudo one.&lt;/p&gt;
&lt;h2 id=&quot;example&quot;&gt;Example with cached media queries&lt;/h2&gt;
&lt;p&gt;As a usage example of the new Stylus features, I&amp;#39;ll give you a solution for one of those small, responsive web design problems: the code you need to write for different viewport breakpoints. The problem is that the syntax of media queries could be rather long, so you could either use bubbling media queries which would result in not ideal &lt;abbr&gt;CSS&lt;/abbr&gt;, or, in the race for bytes, you&amp;#39;ll need to write all the overrides in one place, and that won&amp;#39;t be very comfortable in a lot of situations.&lt;/p&gt;
&lt;p&gt;However, in the new Stylus, with block mixins, hashes and the &lt;code&gt;selector()&lt;/code&gt; function, you could work around this problem (and solve some others on your way to it).&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;nobr&quot;&gt;Briefly —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;we can create a mixin that could be used instead of media queries and would cache the given blocks, combining them by conditions, so you could then output all of them using the second function.&lt;/p&gt;
&lt;p&gt;The only downside of this method is the grouping &lt;span class=&quot;nobr&quot;&gt;itself —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;the selectors would be in a different order, so the specificity of the selectors could change.&lt;/p&gt;
&lt;p&gt;For the start we need an object where we would store the cached blocks:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-styl&quot;&gt;$media_cache = {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we would need a mixin which we could use instead of media queries; its basic form would be this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-styl&quot;&gt;media($condition)
  unless $media_cache[$condition]
    $media_cache[$condition] = ()
  push($media_cache[$condition], block)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This mixin&amp;#39;s logic is rather simple: if we don&amp;#39;t have a list of the blocks for a given condition, we initialize it then we pass the block to this list.&lt;/p&gt;
&lt;p&gt;It won&amp;#39;t be enough for us actually: this mixin could be used only this way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-styl&quot;&gt;+media(&amp;#39;(max-width:640px)&amp;#39;)
  .foo
    display: block;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could only pass full blocks to it, but couldn&amp;#39;t use the bubbling:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-styl&quot;&gt;.foo
  +media(&amp;#39;(max-width:640px)&amp;#39;)
    display: block;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code of our &lt;code&gt;media&lt;/code&gt; mixin doesn&amp;#39;t know anything about the context, the selector where we called &lt;span class=&quot;nobr&quot;&gt;it —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;yet. Here the new &lt;code&gt;selector()&lt;/code&gt; function and an extra helper mixin are required, and with them &lt;code&gt;media&lt;/code&gt; mixin would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-styl&quot;&gt;media($condition)
  helper($condition)
    unless $media_cache[$condition]
      $media_cache[$condition] = ()
    push($media_cache[$condition], block)

  +helper($condition)
    {selector()}
      {block}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To save the context we move the initial code of this mixin inside a helper mixin, then call it passing the &lt;code&gt;block&lt;/code&gt; inside the interpolated&lt;code&gt;selector()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, as we now wrap the code with a mixin, it won&amp;#39;t build automatically. We would need to call a function that would take a cache and put all it contains where we call it (and it would be logical to call it at the end of our stylesheet):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-styl&quot;&gt;apply_media_cache()
  for $media, $blocks in $media_cache
    @media $media
      for $block in $blocks
        {$block}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is rather easy: we iterate through the cache, taking the &lt;span class=&quot;nobr&quot;&gt;condition —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;&lt;code&gt;$media&lt;/code&gt;, and the list of all the blocks that were called with &lt;span class=&quot;nobr&quot;&gt;it —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;&lt;code&gt;$blocks&lt;/code&gt;, then we create the media query with that condition and inside of it iterate through all the blocks, yielding all of them one by one.&lt;/p&gt;
&lt;p&gt;So, if we would then call this function at the end of the document:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-styl&quot;&gt;apply_media_cache()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We would get what we want.&lt;/p&gt;
&lt;p&gt;However, there are a few things to improve in this function: we do not want always to write the parentheses, and, actually, we won&amp;#39;t want to write all those &lt;code&gt;only screen and&lt;/code&gt;. Also, we would want to use some keywords instead of the literal conditions, like &lt;span class=&quot;Sidenote-Wrapper&quot;&gt;&lt;a class=&quot;Sidenote-Context&quot; href=&quot;#keywords&quot; id=&quot;keywords&quot;&gt;&lt;code&gt;palm&lt;/code&gt;, &lt;code&gt;portable&lt;/code&gt;, &lt;code&gt;desk&lt;/code&gt;&lt;/a&gt;&lt;span class=&quot;Sidenote&quot; role=&quot;note&quot;&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt; (&lt;/span&gt;I&amp;#39;ve taken the names from the great &lt;a href=&quot;http://inuitcss.com/&quot;&gt;inuit.css&lt;/a&gt; framework by &lt;a href=&quot;@csswizardry&quot;&gt;Harry Roberts&lt;/a&gt;&lt;span class=&quot;Sidenote-Misc&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;a class=&quot;Sidenote-Close&quot; href=&quot;#x&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt; and so on. With those improvements and all the previous steps the resulting code would be this:&lt;/p&gt;
&lt;h3 id=&quot;result&quot;&gt;Resulting code&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-styl&quot;&gt;// Define the cache and the aliases
$media_cache = {}
$media_aliases = {
  palm:       &amp;#39;(max-width: 480px)&amp;#39;
  lap:        &amp;#39;(min-width: 481px) and (max-width: 1023px)&amp;#39;
  lap-and-up: &amp;#39;(min-width: 481px)&amp;#39;
  portable:   &amp;#39;(max-width: 1023px)&amp;#39;
  desk:       &amp;#39;(min-width: 1024px)&amp;#39;
  desk-wide:  &amp;#39;(min-width: 1200px)&amp;#39;
}

// Mixin for caching the blocks with the given conditions
media($condition)
  helper($condition)
    unless $media_cache[$condition]
      $media_cache[$condition] = ()
    push($media_cache[$condition], block)

  +helper($condition)
    {selector() + &amp;#39;&amp;#39;}
      {block}

// Function we would use to call all the cached styles
apply_media_cache()
  for $media, $blocks in $media_cache
    $media = unquote($media_aliases[$media] || $media)
    $media = &amp;#39;(%s)&amp;#39; % $media unless match(&amp;#39;\(&amp;#39;, $media)
    $media = &amp;#39;only screen and %s&amp;#39; % $media
    @media $media
      for $block in $blocks
        {$block}

// Here would be our main styles, using the `media` mixin
// …

// Here we call all the cached styles
apply_media_cache()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we could write our stylesheets like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-styl&quot;&gt;.foo
  width: 10px

  +media(&amp;#39;lap&amp;#39;)
    width: 20px

  +media(&amp;#39;desk&amp;#39;)
    width: 30px

  +media(&amp;#39;min-width: 200px&amp;#39;)
    width: 60px

.bar
  height: 10px

  +media(&amp;#39;lap&amp;#39;)
    height: 20px

  +media(&amp;#39;desk&amp;#39;)
    height: 30px

  +media(&amp;#39;min-width: 200px&amp;#39;)
    height: 50px

  +media(&amp;#39;(min-width: 500px) and (max-width: 700px)&amp;#39;)
    height: 50px
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And get this result afterwards:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.foo {
  width: 10px;
}
.bar {
  height: 10px;
}
@media only screen and (min-width: 481px) and (max-width: 1023px) {
  .foo {
    width: 20px;
  }
  .bar {
    height: 20px;
  }
}
@media only screen and (min-width: 1024px) {
  .foo {
    width: 30px;
  }
  .bar {
    height: 30px;
  }
}
@media only screen and (min-width: 200px) {
  .foo {
    width: 60px;
  }
  .bar {
    height: 50px;
  }
}
@media only screen and (min-width: 500px) and (max-width: 700px) {
  .bar {
    height: 50px;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the resulting code, we can see that we added the hash with aliases, we can also call the mixin with conditions lacking parentheses.&lt;/p&gt;
&lt;p&gt;By using this code we can now use media queries bubbling anywhere we want and don&amp;#39;t even need to think about the extra &lt;span class=&quot;nobr&quot;&gt;bytes —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;everything would be nicely grouped inside non-doubling media queries. All thanks to the new Stylus features.&lt;/p&gt;
&lt;p&gt;Of course, this code is not ideal, and there could be a lot of ways to improve it, but my goal was to demonstrate the new features and how they work, after all.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Updated Jekyll</title>
    <link href="http://kizu.ru/en/blog/updated-jekyll/"/>
    <updated>2013-06-05T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/blog/updated-jekyll</id>
    <content type="html">&lt;h1 id=&quot;updated-jekyll&quot;&gt;Updated Jekyll&lt;/h1&gt;
&lt;p&gt;Not that long ago Jekyll become that &lt;span class=&quot;nobr&quot;&gt;big —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;version “1.0” &lt;a href=&quot;https://github.com/blog/1502-jekyll-turns-1-0&quot;&gt;was released&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are a lot of stuff in &lt;a href=&quot;https://github.com/mojombo/jekyll/blob/master/History.markdown#100—2013-05-06&quot;&gt;the changelog&lt;/a&gt;: there are new features, there are a lot of fixes. You can read what&amp;#39;s the most important &lt;a href=&quot;http://jekyllrb.com/docs/upgrading/&quot;&gt;in this article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I moved my site to this version. Well, not actually &lt;em&gt;moved&lt;/em&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;everything worked anyway, but there were some stuff in a new version that I could use to make things in a better way. So, I&amp;#39;ll write a bit on what I personally liked in this new version.&lt;/p&gt;
&lt;h2 id=&quot;page-path&quot;&gt;&lt;code&gt;page.path&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;It&amp;#39;s one of those things I wanted the Jekyll to &lt;span class=&quot;nobr&quot;&gt;have —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;I even &lt;a href=&quot;https://github.com/mojombo/jekyll/issues/633#issuecomment-11678912&quot;&gt;pinged developers a bit&lt;/a&gt; in a corresponding issue at GitHub.&lt;/p&gt;
&lt;p&gt;Old version of Jekyll had one flaw: there were no ways to retrieve the path of the source files for pages or blog posts. Why is this important? The blog or a site that&amp;#39;s hosted at GitHub would profit a lot from giving a way for its users to edit the content. To make it really easy it would be handy to provide a link that would go either straight to the GitHub&amp;#39;s edit file page, or at any other service that provides such possibility, like prose.io (which I use). This link would need to have the url to the source encoded in it; without proper method to do it there were only the dirtiest hacks available to implement this behavior.&lt;/p&gt;
&lt;p&gt;And now it became really &lt;span class=&quot;nobr&quot;&gt;simple —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;the data of the posts and pages now contains the &lt;code&gt;path&lt;/code&gt; variable, which contains the path to the source of the page. Hooray!&lt;/p&gt;
&lt;h2 id=&quot;absolute-permalinks&quot;&gt;Absolute permalinks&lt;/h2&gt;
&lt;p&gt;Permalinks set in &lt;abbr&gt;YAML&lt;/abbr&gt; front matter were relative before. Even more, you couldn&amp;#39;t set them to point at the upper levels, like using &lt;code&gt;../&lt;/code&gt; (or I couldn&amp;#39;t find how to make it work). But in a new Jekyll you could use absolute permalinks. Actually, right now, in 1.0, you need to enable them in the config using &lt;code&gt;relative_permalinks:false&lt;/code&gt;, but with 1.1 this would be the default behavior. So, if you&amp;#39;re using relative permalinks now and don&amp;#39;t want them to become absolute at one moment, you&amp;#39;ll need to either change them to absolute ones, or just set the &lt;code&gt;relative_permalinks:true&lt;/code&gt;, so nothing would go wrong when 1.1 would be there.&lt;/p&gt;
&lt;p&gt;Absolute permalinks made a lot of things easier for &lt;span class=&quot;nobr&quot;&gt;me —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;I could move all index pages for categories etc. to a single folder, for example.&lt;/p&gt;
&lt;h2 id=&quot;changed-syntax-in-cli&quot;&gt;Changed syntax in &lt;abbr&gt;CLI&lt;/abbr&gt;&lt;/h2&gt;
&lt;p&gt;New Jekyll comes with changed syntax in &lt;abbr&gt;CLI&lt;/abbr&gt;, and one of the most interesting features is an ability to use additional configs.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;d like to run Jekyll with both the default config &lt;code&gt;_config.yml&lt;/code&gt; and an extra one, like &lt;code&gt;_config-dev.yml&lt;/code&gt;, you could run Jekyll this way:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jekyll serve --config _config.yml,_config-dev.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using this you could easily set up the dev environment, where you could change the absolute urls to be localhost, turn on the display of the drafts and do anything extra that won&amp;#39;t show up in the production.&lt;/p&gt;
&lt;h2 id=&quot;drafts&quot;&gt;Drafts&lt;/h2&gt;
&lt;p&gt;In new Jekyll you could create proper drafts. If you&amp;#39;d create a &lt;code&gt;_drafts&lt;/code&gt; folder, its content won&amp;#39;t render by default, but if you&amp;#39;d run your local copy with &lt;code&gt;--drafts&lt;/code&gt; key in &lt;abbr&gt;CLI&lt;/abbr&gt;, the content of the drafts would be rendered like if it had been placed in the &lt;code&gt;_posts&lt;/code&gt; directory. One useful thing here is that you won&amp;#39;t need to set the date in the posts&amp;#39; filename, and when you&amp;#39;d need to publish the draft you&amp;#39;ll just need move the post from the &lt;code&gt;_drafts&lt;/code&gt; to the &lt;code&gt;_posts&lt;/code&gt; and add the date to its filename.&lt;/p&gt;
&lt;p&gt;While I&amp;#39;m not using such drafts right now, it&amp;#39;s looking like a nice feature, so I&amp;#39;ll think if it could be used for my site.&lt;/p&gt;
&lt;h2 id=&quot;other-stuff&quot;&gt;Other stuff&lt;/h2&gt;
&lt;p&gt;There are a lot of other things mentioned in &lt;a href=&quot;https://github.com/mojombo/jekyll/blob/master/History.markdown#minor-enhancements-3&quot;&gt;the changelog&lt;/a&gt;, but all that matters for me I mentioned in this post.&lt;/p&gt;
&lt;p&gt;Overall, I&amp;#39;m happy to use Jekyll 1.0 now and recommend it to &lt;span class=&quot;nobr&quot;&gt;anyone —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;it become a bit easier to use with all the new stuff.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Application shortcuts</title>
    <link href="http://kizu.ru/en/blog/application-shortcuts/"/>
    <updated>2013-06-03T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/blog/application-shortcuts</id>
    <content type="html">&lt;h1 id=&quot;application-shortcuts&quot;&gt;Application shortcuts&lt;/h1&gt;
&lt;p&gt;Here is one workflow thing I use all the time and I want to &lt;span class=&quot;nobr&quot;&gt;share —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;using keyboard shortcuts to switch between applications.&lt;/p&gt;
&lt;p&gt;I’m talking not about those system &lt;span class=&quot;nobr&quot;&gt;shortcuts —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;&lt;code&gt;cmd+tab&lt;/code&gt;/&lt;code&gt;alt+tab&lt;/code&gt;. They are &lt;span class=&quot;nobr&quot;&gt;awful —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;because they are modal. You can’t tell at any given time what would be the result of using such shortcut: those shortcuts switch focus between the recent used apps, so you need to remember which applications you used and in which order. Which could be rather frustrating when you use more than two applications.&lt;/p&gt;
&lt;p&gt;The solution is rather easy (my colleague Vitaly Harisov shown me it at december 2009): you just need to set a shortcut to any often-used application.&lt;/p&gt;
&lt;p&gt;In 2009 I used Spaces in Mac OS for &lt;span class=&quot;nobr&quot;&gt;this —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;you could make a lot of spaces, each with just one app, and then set up the shortcut for each of those spaces. We used shortcuts like &lt;code&gt;option+A&lt;/code&gt;, &lt;code&gt;option+S&lt;/code&gt;, &lt;code&gt;option+D&lt;/code&gt; etc.&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;those keys are always under your fingers, and the symbols you’d get by those native shortcuts are not that useful anyway, so we could live without them.&lt;/p&gt;
&lt;p&gt;Vitaly offered me this layout: in the centre raw of letters there were shortcuts for browsers, so you could switch between often to check your markup (something had changed there since 2009, but the main idea is clear):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;option+A&lt;/code&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;Opera, that was our main browser, so letter &lt;strong&gt;A&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;option+S&lt;/code&gt; —&lt;strong&gt;S&lt;/strong&gt;afari;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;option+D&lt;/code&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;IE, &lt;code&gt;D&lt;/code&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;&amp;#39;cause it was &lt;strong&gt;D&lt;/strong&gt;umb;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;option+F&lt;/code&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;&lt;strong&gt;F&lt;/strong&gt;irefox.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other apps were somewhere near:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;option+Q&lt;/code&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;Terminal, &lt;code&gt;Q&lt;/code&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;rather close to other shortcuts;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;option+W&lt;/code&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;Finder, for the same reason;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;option+E&lt;/code&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;The main code &lt;strong&gt;E&lt;/strong&gt;ditor.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also added shortcuts using &lt;code&gt;shift&lt;/code&gt;, so &lt;code&gt;option+shift+E&lt;/code&gt; went for the secondary code editor, &lt;code&gt;option+shift+A&lt;/code&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;for the Opera Next etc.&lt;/p&gt;
&lt;p&gt;Right now I have shortcuts for messenger, mail, image editor, iA Writer and a lot of other stuff I use.&lt;/p&gt;
&lt;p&gt;With one Mac OS version Spaces become worse to use with shortcuts and at the same time I bought great &lt;a href=&quot;http://www.alfredapp.com&quot;&gt;Alfred Powerpack&lt;/a&gt;, which had a very handy way to set any apps or files to keyboard shortcuts. With Alfred the setup of such shortcuts become so much easier, I got the sync for those settings across my two MacBooks using Dropbox, and the switch between apps become even faster than with Spaces (even after disabling the space switching animation). As I know, there are a bunch of similar apps for Mac like &lt;a href=&quot;http://qsapp.com/&quot;&gt;QuickSilver&lt;/a&gt; or &lt;a href=&quot;http://www.boastr.de&quot;&gt;BetterTouchTool&lt;/a&gt;, that can do the same trick. I think there should be apps for other OS like this, so if there &lt;span class=&quot;nobr&quot;&gt;are —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;write me and I’ll add them here.&lt;/p&gt;
&lt;p&gt;Anyway, you really should try &lt;span class=&quot;nobr&quot;&gt;them —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;your workflow would be so much faster and seamless with them:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When you’ll need to switch to any app, you&amp;#39;ll just press its keys. You don’t need to remember which app you used before, if it is already launched or not (Alfred would launch it for you if it’s not) and about a lot of other needless hassles.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s way much faster and easier than using other ways of &lt;span class=&quot;nobr&quot;&gt;switching —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;like using your mouse or touchpad, or calling apps using Spotlight, Quicksilver or Alfred prompts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And if you’d use the same shortcuts in teams, it would be really easy to come and show anything on your colleagues’ &lt;span class=&quot;nobr&quot;&gt;machines —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;you’ll know what to press to get the kind of app you need, even if your friends uses vim instead of your lovely ST, or another browser, or anything else. And they could have Dock hidden in a place you’d never guess (or another monitor). But with the agreement on the common shortcuts for apps you could just work with their environment as with yours.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

    </content>
  </entry>
  <entry>
    <title>“Blog”</title>
    <link href="http://kizu.ru/en/blog/hello-blog/"/>
    <updated>2013-05-07T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/blog/hello-blog</id>
    <content type="html">&lt;h1 id=&quot;-blog-&quot;&gt;“Blog”&lt;/h1&gt;
&lt;p&gt;Hello! As I wrote in a &lt;a href=&quot;/en/issues/restart/&quot;&gt;post on the relaunch of my site&lt;/a&gt;, the main goal for the new version was to ease the process of adding new entries. However, beyond the technical side I completely forgot about &lt;em&gt;what exactly&lt;/em&gt; I wanted to write in that easy and simple way.&lt;/p&gt;
&lt;p&gt;Until today everything I published on my site could be divided to two categories: &lt;a href=&quot;/issues/&quot;&gt;“issues”&lt;/a&gt; and &lt;a href=&quot;/fun/&quot;&gt;“experiments”&lt;/a&gt;. In “issues” I tried to publish mostly objective things with all the proper arguments and thoughts went through a lot of thinking. Maybe those things could be called “articles”, but I don’t like this word. In “experiments”went all those things like prototypes for different interesting things, made mostly just for fun, not as production solutions, almost without any descriptions whatsoever. While &lt;em&gt;now&lt;/em&gt; I see a bit of sense in describing things (like I did with my experiment on &lt;a href=&quot;:rotated-text&quot;&gt;rotated text&lt;/a&gt;), I still don’t like the style of &lt;span class=&quot;nobr&quot;&gt;step-by&lt;/span&gt;-step tutorials that describe every letter here and there. So, those things I publish as “experiments” couldn’t go into “issues”.&lt;/p&gt;
&lt;p&gt;So, why did I made it easy to write posts for my site? It’s because I wanted to write &lt;em&gt;more often&lt;/em&gt;. Not to publish articles or experiments (not that often for those), but to maintain a &lt;em&gt;blog&lt;/em&gt;. Not to post objective, complicated things, not for some crazy experiments with hardcore code, but to have a platform where I could share something simple, something casual maybe. Simple ideas, thoughts, critics for stuff that’s going on in the today’s frontend world.&lt;/p&gt;
&lt;p&gt;When it was hard to publish a new post on a site I didn’t thought of it as a blog, but then I came to it and remade my site from scratch, but in a process I, again, forgot why I did all those things to Jekyll and &lt;span class=&quot;nobr&quot;&gt;myself —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;forgot that I wanted it there for the short and simple posts. So, after the relaunch of a site there were not that much of new posts, but at the same time there were a lot of drafts and sketches for them. I forgot that you could post things not polished to the shining, but short, rough and unfinished posts (and I’ll complete all those drafts and publish them someday, but I won’t haste myself and would do it properly, without a hard schedule).&lt;/p&gt;
&lt;p&gt;And now I remembered about all those thing, and here it &lt;span class=&quot;nobr&quot;&gt;is —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nobr&quot;&gt;blog —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;a new category on my site. Well, “category” is a strong word here, it’s just a way to cheat on myself and make me to write those &lt;span class=&quot;nobr&quot;&gt;not-so&lt;/span&gt;-long things. The fact is all those posts would still go to &lt;a href=&quot;http://feeds.feedburner.com/kizuruen&quot; title=&quot;Atom actually, but is there a better term for it?&quot;&gt;&lt;abbr&gt;RSS&lt;/abbr&gt;&lt;/a&gt;, I still would share them on twitter, so nothing new there for you, except all those posts I’ll write actually.&lt;/p&gt;
&lt;p&gt;So, hooray, here it is, a blog. I’ll try to post here some stupid things often :)&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Rotated text</title>
    <link href="http://kizu.ru/en/fun/rotated-text/"/>
    <updated>2013-04-30T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/fun/rotated-text</id>
    <content type="html">&lt;h1 id=&quot;rotated-text&quot;&gt;Rotated text&lt;/h1&gt;
&lt;p&gt;Once I already shared this solution on twitter, but this time I’m going to write a bit more on it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The task&lt;/strong&gt; is to get the text rotated by 90 degrees.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The problem&lt;/strong&gt;: it’s widely known that when you use &lt;code&gt;transform&lt;/code&gt;, the block behaves similar to the &lt;code&gt;position:relative&lt;/code&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;its place in the flow is not changed after the transformation, so the change is only visual.&lt;/p&gt;
&lt;p&gt;However, rather often you’ll &lt;em&gt;need&lt;/em&gt; to rotate the block in a way the flow would change either. Like if we’d want to put some rotated blocks in a row, or if we’d want to have vertical headers in &lt;span class=&quot;nobr&quot;&gt;tables —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;in those cases we would need the height of the block to be its width after the rotate and vice versa.&lt;/p&gt;
&lt;p&gt;I managed to make this work with one &lt;span class=&quot;nobr&quot;&gt;assumption —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;we would need to know the height of the rotated element. In such case the solution would be rather simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We would need to have an extra element. &lt;abbr&gt;HTML&lt;/abbr&gt; for each block would be like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt; &amp;lt;span class=&amp;quot;rotated-text&amp;quot;&amp;gt;
     &amp;lt;span class=&amp;quot;rotated-text__inner&amp;quot;&amp;gt;
         Rotated foo
     &amp;lt;/span&amp;gt;
 &amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wrapper would get those styles:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt; .rotated-text {
     display: inline-block;
     overflow: hidden;

     width: 1.5em;
     line-height: 1.5;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; Here we make our element to be inline-block (that’s not critical, the block display would work too, but inline-block is often handier), then we remove all the extra things using overflow (we would need this later) and set the width to the current elements’ &lt;span class=&quot;nobr&quot;&gt;height —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;the mentioned assumption (and &lt;code&gt;line-height&lt;/code&gt; is placed here as an example of what defines the blocks’ height).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then we make the inner element to be inline-block too, so its width would be collapsed to its content. After this we make it have &lt;code&gt;white-space:nowrap&lt;/code&gt;, so nothing would wrap (because of the fixed width in the previous step), and then we actually rotate the block from the left top corner using &lt;code&gt;transform-origin&lt;/code&gt; (for readability the transform properties are given without proper prefixes):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt; .rotated-text__inner {
     display: inline-block;
     white-space: nowrap;

     transform: translate(0,100%) rotate(-90deg);
     transform-origin: 0 0;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And now the key part of my solution: we need to make this inner element to be &lt;em&gt;square&lt;/em&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;this would make the resulting element to have the height of its width, and the width would be equal to the assumed height on the wrapper. So, to make an element squarish we use this trick:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt; .rotated-text__inner:after {
     content: &amp;quot;&amp;quot;;
     float: left;
     margin-top: 100%;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; Not that hard, but not a lot of people remember that top and bottom paddings and margins set in percents are using the width of the parent element, not its height. This behavior is not widely used, but here is a case where it’s useful at last.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, in the end we got a square element, whose width is hidden by the overflow on wrapper and this element could be used in any context, so it would be affected by &lt;code&gt;text-align&lt;/code&gt; or &lt;code&gt;vertical-align&lt;/code&gt;. It is rather “fair” rotated block.&lt;/p&gt;
&lt;p&gt;And just some basic examples of usage:&lt;/p&gt;
&lt;h2 id=&quot;table-headers&quot;&gt;Table headers&lt;/h2&gt;
&lt;p&gt;An obvious &lt;span class=&quot;nobr&quot;&gt;example —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;compact table headers what don’t take that much of horizontal space:&lt;/p&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/fun/rotated-text/#Demo_rotated-text&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;-bookshelf-&quot;&gt;“Bookshelf”&lt;/h2&gt;
&lt;p&gt;As all the rotated blocks have fair place in a flow, you could arrange them in a row so they won’t overlap each other and the height of the whole row would be equal to the “highest” of them:&lt;/p&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/fun/rotated-text/#Demo_rotated-text_books&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, that’s it.&lt;/p&gt;
&lt;p&gt;Once again: we need to know the initial height of the rotated block, so if we’d need to rotate multiline blocks, we’d need to change their resulting width accordingly.&lt;/p&gt;
&lt;p&gt;Also, this method could work in &lt;span class=&quot;nobr&quot;&gt;IE —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;by adding matrix filter and converting a pseudo-element to an actual &lt;span class=&quot;nobr&quot;&gt;one —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;but I’m lazy enough to do this. But if you’d like, you could make it by yourself and even submit a Pull Requests to &lt;a href=&quot;https://github.com/kizu/kizu.github.com/blob/master/demos/rotated-text.html&quot;&gt;those&lt;/a&gt; &lt;a href=&quot;https://github.com/kizu/kizu.github.com/blob/master/demos/rotated-text_books.html&quot;&gt;examples&lt;/a&gt; :)&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Markdowning YAML for Jekyll</title>
    <link href="http://kizu.ru/en/issues/markdowning-yaml/"/>
    <updated>2013-04-21T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/issues/markdowning-yaml</id>
    <content type="html">&lt;h1 id=&quot;markdowning-yaml-for-jekyll&quot;&gt;Markdowning &lt;abbr&gt;YAML&lt;/abbr&gt; for Jekyll&lt;/h1&gt;
&lt;p&gt;While I’m struggling to write a lengthy article, here is a small one, on a little Jekyll trick I use.&lt;/p&gt;
&lt;p&gt;In Jekyll you need to use &lt;abbr&gt;YAML&lt;/abbr&gt; front matter to add any metadata to the post or page. Actually, Jekyll “sees” only those files that have the &lt;abbr&gt;YAML&lt;/abbr&gt; front matter, so it is a somewhat important thing.&lt;/p&gt;
&lt;p&gt;Most of the time this front matter would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
layout: docs
title: Resources
prev_section: sites
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It could seem to be ok. However, as I use Jekyll right on GitHub, my perfectionism tells me that the source of all my posts in markdown should look perfect when looked at GitHub. And it would render all the markdown documents instead of showing their content. So, the &lt;abbr&gt;YAML&lt;/abbr&gt; front matter in that case would look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img-fotki.yandex.ru/get/6430/1076905.1/0_9789a_239b2fc2_orig.png&quot; alt=&quot;Bad code&quot;&gt;&lt;/p&gt;
&lt;p&gt;Not that readable, huh? And the last line suddenly became a &lt;span class=&quot;nobr&quot;&gt;header —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;I don’t think it’s what we could want there.&lt;/p&gt;
&lt;p&gt;However, it can be fixed with ease: you just need to add some extra lines &lt;span class=&quot;nobr&quot;&gt;in-between&lt;/span&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---

layout: docs

title: Resources

prev_section: sites

---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this would look so much better at GitHub:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img-fotki.yandex.ru/get/5625/1076905.1/0_97899_16bfcbbf_orig.png&quot; alt=&quot;Good code&quot;&gt;&lt;/p&gt;
&lt;p&gt;Instead of a useless header we would get &lt;abbr&gt;YAML&lt;/abbr&gt; nicely separated from content, and every line would become a paragraph there.&lt;/p&gt;
&lt;p&gt;As most of posts won’t have a lot of metadata, those extra lines won’t bloat the code. And, in my opinion, this code style is also more readable when you’re working with actual code, so I don’t see any reasons why you shouldn’t use it all the time for &lt;abbr&gt;YAML&lt;/abbr&gt; front matters.&lt;/p&gt;
&lt;p&gt;The only thing I don’t like there is that &lt;abbr&gt;YAML&lt;/abbr&gt; is so strict. You can’t add indents in the front of data, or use lists with hyphens &lt;span class=&quot;nobr&quot;&gt;here —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;those could be rendered even nicer. Also, if someone would see any other possibility to enhance the readability of the &lt;abbr&gt;YAML&lt;/abbr&gt; front &lt;span class=&quot;nobr&quot;&gt;matters —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;tell me via twitter or by issues on GitHub.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Jekyll</title>
    <link href="http://kizu.ru/en/issues/going-jekyll/"/>
    <updated>2013-01-30T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/issues/going-jekyll</id>
    <content type="html">&lt;h1 id=&quot;jekyll&quot;&gt;Jekyll&lt;/h1&gt;
&lt;p&gt;In a &lt;a href=&quot;/en/issues/restart/&quot;&gt;post on site relaunch&lt;/a&gt; I told I’ll write a lot of articles on Jekyll. That’s the first post in the series, an introduction.&lt;/p&gt;
&lt;p&gt;I won’t write on how to install &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;, how the files are structured there, and so &lt;span class=&quot;nobr&quot;&gt;on —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;there are already a lot of articles on that (look for some at the &lt;a href=&quot;#links&quot;&gt;“links”&lt;/a&gt;). To describe Jekyll briefly, it’s a blog-aware static site generator. An awesome one.&lt;/p&gt;
&lt;h2 id=&quot;github-pages&quot;&gt;GitHub Pages&lt;/h2&gt;
&lt;p&gt;I need to tell one thing from the start: this and all other future articles would be in the context of &lt;a href=&quot;http://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt;. While GitHub allows you to host any static sites on it, there is also a way to host sites wrote with Jekyll. So, the Jekyll is the only way to actually generate something right at GitHub without use of any other services or any front-end solutions.&lt;/p&gt;
&lt;p&gt;With Jekyll you can just create a file in markdown, add a &lt;abbr&gt;YAML&lt;/abbr&gt; front matter to &lt;span class=&quot;nobr&quot;&gt;it —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;and start writing. After pushing this file to the repo on GitHub, the whole site would be regenerated and you’ll see the corresponding post both as a page on your site and in all the listings on other pages as well. And you could push your changes from any place: you could even use just GitHub’s site for this or any web app using GitHub’s &lt;abbr&gt;API&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;And another thing I need to mention right from the start: a lot of things I’ll describe in the next articles could be made &lt;em&gt;so mush&lt;/em&gt; easier using plugins. But I won’t go an easy &lt;span class=&quot;nobr&quot;&gt;way —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;I’d like to make everything in a way more people could use it: even in places where the plugins are &lt;span class=&quot;nobr&quot;&gt;disabled —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;as on GitHub Pages.&lt;/p&gt;
&lt;h2 id=&quot;-hello-world-&quot;&gt;“Hello world”&lt;/h2&gt;
&lt;p&gt;Minimal document you’ll need to generate a site on Jekyll should contain the &lt;a href=&quot;http://en.wikipedia.org/wiki/YAML&quot;&gt;&lt;abbr&gt;YAML&lt;/abbr&gt;&lt;/a&gt; front matter with at least one &lt;span class=&quot;nobr&quot;&gt;field —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;&lt;code&gt;layout&lt;/code&gt; (you could actually make one without it, with empty &lt;abbr&gt;YAML&lt;/abbr&gt; front matter, but in that case your page won’t have any layout at all). So, the minimal &lt;code&gt;hello-world.md&lt;/code&gt; for Jekyll would look like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
layout: default
---

Hello world!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In real world you’d like to add at least a title or some other data, but for the most trivial cases that’s the minimal code to start from.&lt;/p&gt;
&lt;h2 id=&quot;dates&quot;&gt;Dates&lt;/h2&gt;
&lt;p&gt;One of the features I like in Jekyll is its format for posts. You need to name the files as &lt;code&gt;YYYY-MM-DD-title&lt;/code&gt; and I think that’s awesome. It makes you to maintain a better file hierarchy that would be sorted by date automatically, and also you won’t need to write the date in the post &lt;span class=&quot;nobr&quot;&gt;itself —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;Jekyll would use the date from the filename. Yes, in some cases you’ll want to use the &lt;code&gt;published&lt;/code&gt; field in &lt;abbr&gt;YAML&lt;/abbr&gt; to override the date from the filename, but it’s up to you. In most cases you won’t need it.&lt;/p&gt;
&lt;h2 id=&quot;prose-io&quot;&gt;Prose.io&lt;/h2&gt;
&lt;p&gt;And if you don’t like to fill up &lt;abbr&gt;YAML&lt;/abbr&gt; by yourself, and you don’t want to use any scripts for it (like it’s done in Jekyll Bootstrap), you could use a service like &lt;a href=&quot;http://prose.io&quot;&gt;Prose.io&lt;/a&gt;. This awesome service allows you to &lt;a href=&quot;http://prose.io/help/handbook.html#metadata_defaults&quot;&gt;describe all the metadata defaults&lt;/a&gt; in a config, so when you create a new post using Prose, all the metadata would be filled for you (actually, in most basic cases you’d need to at least look at the metadata, but that’s another story I’ll tell someday later).&lt;/p&gt;
&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;p&gt;There is a lot of useful info in the internets on Jekyll, I’ll try to sum all the useful links in this post for you (and for myself). There are links that would help you to start with Jekyll, and the links that are useful all the time you’re tinkering with the logic behind Jekyll’s templates.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll’s official site&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://prose.io/help/handbook.html&quot;&gt;configuring Prose.io for Jekyll&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are also a lot of helpful pages on Jekyll in the &lt;a href=&quot;http://jekyllbootstrap.com&quot;&gt;Jekyll Bootstrap&lt;/a&gt; project. I found those ones to be the most useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jekyllbootstrap.com/lessons/jekyll-introduction.html&quot;&gt;Introduction to Jekyll&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jekyllbootstrap.com/api/template-data-api.html&quot;&gt;template data &lt;abbr&gt;API&lt;/abbr&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Jekyll uses &lt;a href=&quot;http://www.liquidmarkup.org&quot;&gt;Liquid&lt;/a&gt; for templating. GitHub recently &lt;a href=&quot;https://github.com/blog/1366-github-pages-updated-to-jekyll-0-12-0&quot;&gt;updated Jekyll&lt;/a&gt;, so now you could use almost all the tags from the docs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/shopify/liquid/wiki/liquid-for-designers&quot;&gt;list of all the default liquid tags&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/liquid-extensions&quot;&gt;extra liquid tags available in Jekyll&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before this update you couldn’t use the powerful &lt;code&gt;split&lt;/code&gt; &lt;span class=&quot;nobr&quot;&gt;tag —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;almost the only way to make a lot of different things with Jekyll (guess &lt;span class=&quot;nobr&quot;&gt;what —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;there would be some article on me hacking with that tag).&lt;/p&gt;
&lt;p&gt;For writing posts I recommend to use markdown. While there are other ways, like plain &lt;abbr&gt;HTML&lt;/abbr&gt; or Textile, for most cases the markdown would fit the best.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For a markdown engine I’d recommend to use &lt;a href=&quot;http://kramdown.rubyforge.org&quot;&gt;kramdown&lt;/a&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;it’s the best option so far, I’d write why in one of the next articles.&lt;/li&gt;
&lt;li&gt;For configuring the site or any specific post you’ll need to use &lt;a href=&quot;http://en.wikipedia.org/wiki/YAML&quot;&gt;&lt;abbr&gt;YAML&lt;/abbr&gt;&lt;/a&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;so if you’re not familiar with its &lt;span class=&quot;nobr&quot;&gt;syntax —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;go and read about it, it’s nice.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, I’m very happy I’ve chosen the Jekyll for my new site. There are a lot of issues with Liquid templates, but the overall result has been worth it.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Correct Cursor on Active Elements</title>
    <link href="http://kizu.ru/en/issues/cursor-pointer/"/>
    <updated>2013-01-22T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/issues/cursor-pointer</id>
    <content type="html">&lt;h1 id=&quot;correct-cursor-on-active-elements&quot;&gt;Correct Cursor on Active Elements&lt;/h1&gt;
&lt;p&gt;Every active element must have a set &lt;code&gt;cursor&lt;/code&gt; on hover. And it should be &lt;code&gt;cursor:pointer&lt;/code&gt; in most cases.&lt;/p&gt;
&lt;p&gt;By active elements I mean links, buttons, selects, labels with checkboxes and radio buttons, and other similar elements.&lt;/p&gt;
&lt;p&gt;Those elements should be treated as “active” when clicking on such element results in any action. Thereby a menu item for the current page, checked radio button or disabled buttons or links are not active elements, so they shouldn’t have any change on hover.&lt;/p&gt;
&lt;p&gt;At first I thought it’s obvious, but then I found out there are a lot of developers who think otherwise. And I didn’t find any proper arguments against &lt;code&gt;cursor:pointer&lt;/code&gt; for active elements after reading all their points of view.&lt;/p&gt;
&lt;p&gt;In this article I’ll tell you my arguments at first, and then I’ll discuss all the arguments against my point of view, describing why those arguments hadn’t incline me from it.&lt;/p&gt;
&lt;h2 id=&quot;benefits-of-using-cursor-pointer&quot;&gt;Benefits of using &lt;code&gt;cursor:pointer&lt;/code&gt;&lt;/h2&gt;
&lt;h3 id=&quot;visual-feedback&quot;&gt;Visual Feedback&lt;/h3&gt;
&lt;p&gt;For me the main profit from changed cursor is the visual feedback. Ideally every custom element should change its state on hover. However, in real life such state could be absent or wouldn’t differ much from the original state, or would happen with a transition. So there would be no feedback, or it would be not obvious.&lt;/p&gt;
&lt;p&gt;But you surely would see when the cursor &lt;span class=&quot;nobr&quot;&gt;changes —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;this happens instantly and stable. The click that could follow the mouseover would be &lt;em&gt;intuitive&lt;/em&gt;, otherwise the brain would need to match the position of the cursor with the element or spot the element’s change and then find out if it’s a hover state over this element’s active area or something else.&lt;/p&gt;
&lt;p&gt;Changing of the cursor is the most natural, noticeable and obvious feedback you could easily add to any element. Of course, it’s not the best variant, but it’s cheap and easy. If you could add a distinct visual state on hover, then it would be even better.&lt;/p&gt;
&lt;h3 id=&quot;delimitation-of-the-active-area&quot;&gt;Delimitation of the active area&lt;/h3&gt;
&lt;p&gt;There are a lot of cases when you should hint to the users that they could click already. You could often want to increase the clickable area of different elements, like for small icons or for menu items placed near the window edges. In those cases adding a cursor on hover would help users to find out when they could click on an element.&lt;/p&gt;
&lt;p&gt;In some cases, when there are adjacent elements, the cursor wouldn’t be enough to tell which element is &lt;span class=&quot;nobr&quot;&gt;hovered —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;in those cases you should change the visual state of those elements.&lt;/p&gt;
&lt;p&gt;Anyway, if you’d hint users when to use any specific active element, users would know it and it would be easier for them to use the UI next &lt;span class=&quot;nobr&quot;&gt;time —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;they’d need to aim with less precision, because they’d know that active area of an element could be bigger than it can be seen. And when they’d move the cursor they could click right at the moment the cursor would change. Otherwise, if an element don’t change its cursor on hover, the users would need to aim carefully to hit the area of a small element like icon or checkbox.&lt;/p&gt;
&lt;p&gt;And I could argue if someone would say the active area of an element should be as big as its visual representation, but I’ll keep my arguments on this topic for another article.&lt;/p&gt;
&lt;h2 id=&quot;arguments-against-changing-the-cursor&quot;&gt;Arguments against changing the cursor&lt;/h2&gt;
&lt;p&gt;I really did try, but hadn’t find any proper arguments against changing the cursor over the active elements. Most of those arguments can be described as “Don’t break users’ habits!”&lt;/p&gt;
&lt;p&gt;But you can’t treat the presence of habits as an argument. This means there was one of the possible solutions and it was either the only one there, either it was the best at the moment. The habit should be treated in its context, and in context of &lt;em&gt;what&lt;/em&gt; would happen if we’d brake it. Would it be destructive in some way, or it would be just a matter of minor users’ discomfort?&lt;/p&gt;
&lt;p&gt;Another fact is that not all of the habits are good. If we’d always stay with the users’ desires, the progress would stop. Often users become used to the things that only hinder them. A clear example of such bad habit are labels for checkboxes and radio buttons. Lazy developers didn’t bind them together for years, so users often don’t know what the labels could be actually clicked, so they spend their time and efforts trying to hit those little areas of those little controls even if the labels are clickable too. It’s a great example why you should not only bind the inputs with labels, but also tell users about it with all possible ways.&lt;/p&gt;
&lt;p&gt;We could divide the “habits arguments” into different categories. I’d try to answer the most frequently used arguments against the changing of the cursor on hover.&lt;/p&gt;
&lt;h3 id=&quot;-the-cursor-doesn-t-change-in-users-os-&quot;&gt;“The cursor doesn’t change in users’ OS”&lt;/h3&gt;
&lt;p&gt;In OS the most used cursor is just an arrow. It doesn’t change over most of the system controls like buttons. However, the question is “Is this really good?” Is it familiar? Yes. But is it usable and could it be better? I often see how some desktop app is not usable because I need to guess where to &lt;span class=&quot;nobr&quot;&gt;click —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;there are no signs of active areas.&lt;/p&gt;
&lt;p&gt;When we are talking about desktop we should also talk about games too. Unlike apps, games often have custom cursors that are changed over different UI elements. In comparison with modern games most of the web apps feel like the old games with pixel-&lt;span class=&quot;nobr&quot;&gt;hunting —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;you have to guess where to click and where to hover in order to do something. However, recently the web apps tend to use more cursors for different actions like &lt;span class=&quot;nobr&quot;&gt;drag-n&lt;/span&gt;-drop or resize. But why then use the default cursor for buttons? &lt;code&gt;cursor:pointer&lt;/code&gt; would fit great there. And when we’d look at the checkboxes and radio buttons, then there should be not only a distinct visual hover state like changed background, but you shouldn’t forget to set the &lt;code&gt;cursor:default&lt;/code&gt; for &lt;span class=&quot;nobr&quot;&gt;them —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;that’s the cursor the desktop apps mostly use to &lt;em&gt;select&lt;/em&gt; something. But if selecting the checkbox or radio button results in a UI change like expanding the accordion’s section, then the best cursor would be a pointer &lt;span class=&quot;nobr&quot;&gt;one —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;telling something would happen after you’d click.&lt;/p&gt;
&lt;p&gt;Web apps are not the same as desktop apps, there are a lot of new patterns and UI elements there, so it’s time to think again and decide which habits to forget.&lt;/p&gt;
&lt;h3 id=&quot;-i-see-a-pointer-cursor-and-think-it-s-a-link-&quot;&gt;“I see a pointer cursor and think it’s a link!”&lt;/h3&gt;
&lt;p&gt;Ah, that’s another often used argument. When there were no web apps, there were only linked textual documents. The apps mostly didn’t have such links, so in browsers, to tell users what the &lt;abbr&gt;HTML&lt;/abbr&gt; &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; is, there appeared underline, blue color and a pointer cursor. And as all the buttons and inputs were system controls, they inherited the default behavior with the default cursor.&lt;/p&gt;
&lt;p&gt;Years passed and sites become more complex and &lt;span class=&quot;nobr&quot;&gt;UI-rich&lt;/span&gt;, designers created new controls and they often were just the links disguised as buttons and other elements. And in most cases nobody removed the links’ cursors. So if you’d look at the modern sites, most custom buttons would be actually links and would have &lt;code&gt;cursor:pointer&lt;/code&gt; there.&lt;/p&gt;
&lt;p&gt;In fact, you should forget the “pointer is for links” thing a long ago.&lt;/p&gt;
&lt;h3 id=&quot;-but-you-could-open-links-in-new-windows-get-the-contextual-menus-for-them-&quot;&gt;“But you could open links in new windows, get the contextual menus for them…”&lt;/h3&gt;
&lt;p&gt;Well, &lt;span class=&quot;nobr&quot;&gt;yeah —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;links are not buttons, and buttons are not links. But that doesn’t mean the behavior of hover for links and buttons should differ.&lt;/p&gt;
&lt;p&gt;Nobody would expect an ability to open something in a new tab from the button. In each case both the links and the buttons would have their context where users could either await the link’s behavior, either they would just use the control they have. And it really doesn’t matter which cursor the users would &lt;span class=&quot;nobr&quot;&gt;see —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;if users would see a cursor in a links’ context, they would treat it as a link. But if users won’t expect a link, the button underneath would be ok. If users would like to attach a file, they won’t need the link’s behavior. If users would like to send a form, they would just do it, even if there’d be a &lt;code&gt;cursor:pointer&lt;/code&gt; on it, the users won’t go away and won’t try to open it in a new &lt;span class=&quot;nobr&quot;&gt;window —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;they already know how to use search forms. The only place when the users would be &lt;span class=&quot;nobr&quot;&gt;confused —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;if you’d do it reverse: make a button look like a &lt;span class=&quot;nobr&quot;&gt;link —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;be blue and underlined.&lt;/p&gt;
&lt;p&gt;Further &lt;span class=&quot;nobr&quot;&gt;more —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;there are already a lot of links that don’t look like ones and other elements that are disguised as links. Different dropdown handles, filters, cuts, closing icons, “cancel” &lt;span class=&quot;nobr&quot;&gt;links —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;a lot of sites have a lot of elements using different tags in &lt;abbr&gt;HTML&lt;/abbr&gt; for them and having this &lt;code&gt;cursor:pointer&lt;/code&gt;. Why would then simple buttons or selects have default cursor instead of the one all other controls have?&lt;/p&gt;
&lt;p&gt;There is a great example from one company’s service:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kizu.ru/en/issues/cursor-pointer/cursor-pointer.png&quot; alt=&quot;Active areas example&quot;&gt;&lt;/p&gt;
&lt;p&gt;You could try to guess which marked elements are links, which are not; which have &lt;code&gt;cursor:pointer&lt;/code&gt;, which don’t. What would happen when you’ll hover or click any of those elements? You can think for a while, and I’ll give you an answer later.&lt;/p&gt;
&lt;p&gt;If you’d say straightforwardly “only everything that have &lt;code&gt;href&lt;/code&gt; must have a cursor” then a lot of confusing things could appear. For example, if there would be one element visually, but with different tags underneath (like &lt;a href=&quot;http://twitter.github.com/bootstrap/base-css.html#buttons&quot;&gt;bootstrap’s buttons&lt;/a&gt; are), then it would be strange and confusing if there’d be a difference between the button made of &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;. So, I hope everyone would agree that the cursor over every such element should be consistent. And If you’d make the &lt;code&gt;default&lt;/code&gt; one, then it would become really confusing, ’cause there could be a disabled state for this button and you would need to spot the change of the button’s background in order to know could it be pressed or no. And then if you’d remove the &lt;code&gt;cursor:pointer&lt;/code&gt; from an actual link it won’t be any better, so the only proper way is to have &lt;code&gt;cursor:pointer&lt;/code&gt; in both cases.&lt;/p&gt;
&lt;p&gt;We could find a lot of examples with buttons, links and their states would conflict with each other and the overall UX. Making the &lt;code&gt;cursor:pointer&lt;/code&gt; to mark only actionable elements makes sense and won’t create any conflicts other than slight discomfort for some persons.&lt;/p&gt;
&lt;p&gt;And let’s get back to one strange service:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://kizu.ru/en/issues/cursor-pointer/cursor-pointer.png&quot; alt=&quot;Active areas example&quot;&gt;&lt;/p&gt;
&lt;p&gt;So, what’s there?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It’s the post’s permalink. Ok, it’s an actual link, there is an underline and a pointer on hover.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hey, it’s not a link, it’s just a text, not clickable at all.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That’s pseudo-link, there is no actual link, but there is a hover state as the one on permalink: underline and pointer. Clicking here calls a dropdown to appear.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another control that behaves like link (changes color on hover and gets &lt;code&gt;cursor:pointer&lt;/code&gt;), but there is no actual link. Again, dropdown on click.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This icon is not a link and clicking on it does nothing, while the other parts of the &lt;span class=&quot;nobr&quot;&gt;snippet —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;header and &lt;span class=&quot;nobr&quot;&gt;picture —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;are links.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are two links: userpic and username. They’re not connected and have their own hovers: pointer and an underline for username.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s a pseudo-link, no &lt;code&gt;href&lt;/code&gt; seen. And the underline on hover and pointer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Oh, a button! A custom button. But what’t that? No pointer on hover! And even &lt;span class=&quot;nobr&quot;&gt;more —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;hover brings the dropdown, I feel like on a minefield there.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;So, the button was treated as a “system” element, but what’s with checkbox? It and its label have &lt;code&gt;cursor:pointer&lt;/code&gt;. Wow.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, what could I say? There is no even slight consistency and a lot of other UI mistakes. But hey, there is no &lt;code&gt;cursor:pointer&lt;/code&gt; on a button! I wonder which excuses the developer have for this.&lt;/p&gt;
&lt;p&gt;&lt;abbr&gt;BTW&lt;/abbr&gt; it’s very interesting to look at different services in the search for consistency, almost no one is perfect, so you could often find things to think about and to criticise on.&lt;/p&gt;
&lt;h3 id=&quot;-but-the-specs-say-&quot;&gt;“But the specs say…”&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/SelenIT2&quot;&gt;SelenIT&lt;/a&gt; brings &lt;a href=&quot;http://habrahabr.ru/qa/19097/&quot;&gt;another argument&lt;/a&gt; (in Russian): both the &lt;a href=&quot;http://www.w3.org/TR/CSS21/ui.html#propdef-cursor&quot;&gt;&lt;abbr&gt;CSS&lt;/abbr&gt;2.1&lt;/a&gt; spec and the &lt;a href=&quot;http://www.w3.org/TR/css3-ui/#links-and-status-cursors&quot;&gt;&lt;abbr&gt;CSS&lt;/abbr&gt;3 Basic UI&lt;/a&gt; clearly state that “the cursor is a pointer that indicates a link”. He also gives a link to a &lt;a href=&quot;http://lists.w3.org/Archives/Public/public-css-testsuite/2010Jul/0024.html&quot;&gt;Gérard Talbot’s message&lt;/a&gt;, where he declines a change to one of the &lt;abbr&gt;CSS&lt;/abbr&gt;2.1 tests. However, it couldn’t be an argument for this &lt;span class=&quot;nobr&quot;&gt;issue —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;the context of this message is a &lt;strong&gt;test for spec&lt;/strong&gt;, and if spec says something, then the test should cover only this.&lt;/p&gt;
&lt;p&gt;In specs it is only said the pointer is supposed to be used for links, but it don’t imply you &lt;em&gt;can’t&lt;/em&gt; use it for anything other than link. It states the default use of such cursor, nothing more. Moreover, I think this part in specs should be changed to something like “The cursor is a pointer that indicates an element that can be clicked” to reflect modern state of the &lt;span class=&quot;nobr&quot;&gt;web —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;’cause the current statement is come at least from the &lt;a href=&quot;http://www.w3.org/TR/WD-CSS2-971104/ui.html#propdef-cursor&quot;&gt;year 1997&lt;/a&gt; and a lot of things did happen since then.&lt;/p&gt;
&lt;h3 id=&quot;-flickering-&quot;&gt;“Flickering”&lt;/h3&gt;
&lt;p&gt;Here is another, different from habit ones, argument. If there would be a lot of actionable elements, they say, the cursor would blink a lot when you’d move it here and there.&lt;/p&gt;
&lt;p&gt;But that’s not a proper argument, it’s a pointer for one of another problems:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Active elements could be placed not that close one to another. In that case it would be harder for users to hit those elements and there would be symptomatic flickering when you’d move the cursor from one such element to another. Ideally, those elements should have continuous active areas. And to delimit different elements in that case you should use the visual hover like changing background and not the cursorless gaps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another &lt;span class=&quot;nobr&quot;&gt;problem —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;cluttered interface. If you’d have whole page covered in active elements, &lt;span class=&quot;nobr&quot;&gt;then —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nobr&quot;&gt;yeah —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;the cursor would change a lot (however, it already changes a lot when you hover over text or other static elements). When you have a lot of active areas, it could be that you need to simplify something there.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;recap&quot;&gt;Recap&lt;/h2&gt;
&lt;p&gt;In ideal situation every active element should have a distinct visual hover state. But even with such state it won’t hurt to add a &lt;code&gt;cursor:pointer&lt;/code&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;it would only add clarity and would remove possible UI conflicts. And if you can’t find how to make a visual state on hover, adding pointer would be enough for most cases (however, if you’re working with a designer, it would be better to ask them to give you a correct visual hover state).&lt;/p&gt;
&lt;p&gt;And there are just no other arguments against cursor over active elements than user habits. And there would be more happy users than those who moan.&lt;/p&gt;
&lt;p&gt;However, if you have any other arguments I didn’t &lt;span class=&quot;nobr&quot;&gt;cover —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;I would like to hear them. If you know of any A/&lt;span class=&quot;nobr&quot;&gt;B-testing&lt;/span&gt; with different &lt;span class=&quot;nobr&quot;&gt;cursors —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;it would be very cool to look at the results of those.&lt;/p&gt;
&lt;p&gt;Anyway, I hope &lt;em&gt;now&lt;/em&gt; this topic is obvious and you would go and add the &lt;code&gt;cursor:pointer&lt;/code&gt; to anywhere on you page where it is needed.&lt;/p&gt;
&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://css-tricks.com/snippets/css/give-clickable-elements-a-pointer-cursor/&quot;&gt;Chris Coyer’s snippet on adding pointer cursor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; Except for the snippet itself, in the comments there are all the same arguments on habits and points of view without arguments at all.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.usabilitypost.com/2009/10/26/mouse-cursor-affordance/&quot;&gt;Dmitry Fadeyev’s article on cursor’s affordance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; In this article Dmitry comes with this statement: “If the cursor type is wrong, specify it using the &lt;abbr&gt;CSS&lt;/abbr&gt; &lt;code&gt;cursor&lt;/code&gt; property” and gives as an example custom buttons and input placeholders.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://pepelsbey.net/pres/push-it/&quot;&gt;Vadim Makeev’s slides&lt;/a&gt; (in Russian)&lt;/p&gt;
&lt;p&gt; Nice slides on using the right elements for right purposes and all those things, however Vadim says you shouldn’t make a pointer cursor for buttons and I disagree there. Hope he’ll make up his mind after this article.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

    </content>
  </entry>
  <entry>
    <title>Restarting kizu.ru</title>
    <link href="http://kizu.ru/en/issues/restart/"/>
    <updated>2013-01-17T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/issues/restart</id>
    <content type="html">&lt;h1 id=&quot;restarting-kizu-ru&quot;&gt;Restarting kizu.ru&lt;/h1&gt;
&lt;p&gt;Hi there! That was a long way and I think I’m somewhere near the &lt;span class=&quot;nobr&quot;&gt;end —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;I’m relaunching my site. I can’t remember how many versions of it were there when it was entirely in Russian, but that would be the second version of my site in English.&lt;/p&gt;
&lt;p&gt;Oh, did I say I’m near the end? I lied. You know what is the main feature of this version? It’s rough. It’s terribly, awfully draft, it&amp;#39;s broken and smelling. Don’t look at the &lt;span class=&quot;nobr&quot;&gt;source —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;you won’t find there anything better than ugly, barely working code. Really, I’m not joking. Why is it so? I decided to fight my perfectionism. I tended to polish, refine and then polish again my site before; I tried to show only the bestestest code I wrote. But now, this &lt;span class=&quot;nobr&quot;&gt;version —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;it is so far from anything I would like before. And that’s awesome.&lt;/p&gt;
&lt;h2 id=&quot;the-goal&quot;&gt;The Goal&lt;/h2&gt;
&lt;p&gt;So, why did I rewrote the whole site from scratch? Why do I think that it’s superior to the previous variants even in it’s deeply rough form?&lt;/p&gt;
&lt;p&gt;That’s easy. I set the goal for myself: make a site that &lt;strong&gt;would be easy to update&lt;/strong&gt;. That’s &lt;span class=&quot;nobr&quot;&gt;it —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;all other versions with all engines I tried for them weren’t handy for me. I had a lot of things to do for updating and filling the site or changing any parts of it. And I wanted to just write, write a lot. I have a lot of ideas for posts and things to publish at my site, but I’m lazy. Any previous version was like a wall for me, the wall I couldn’t make myself to jump over.&lt;/p&gt;
&lt;p&gt;However, after a lot of prototypes, different engines and rewriting the whole thing several times, I came up with the solution that would fit me and would make updating my site a pleasure. And here it is. All the basic features that I wanted are complete, so I can&amp;#39;t wait anymore and launch it. But why is it pleasure to update the site now?&lt;/p&gt;
&lt;h2 id=&quot;github-amp-jekyll&quot;&gt;GitHub &amp;amp; Jekyll&lt;/h2&gt;
&lt;p&gt;I could praise and praise &lt;span class=&quot;nobr&quot;&gt;GitHub —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;all the work those people do is worth a bunch of articles. But I’ll mention just one thing now.&lt;/p&gt;
&lt;p&gt;GitHub gives you a way to host static &lt;span class=&quot;nobr&quot;&gt;sites —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;&lt;a href=&quot;http://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt;. You could take your repo, throw some static files in it and after a few simple actions you could look at your own static site either at GitHub, or at your own domain if you’d set it up.&lt;/p&gt;
&lt;p&gt;But there is more: other than just hosting plain dull static files, GitHub allows you to autogenerate them for &lt;span class=&quot;nobr&quot;&gt;you —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;using &lt;a href=&quot;https://github.com/mojombo/jekyll#readme&quot;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You could easily make a basic blog using &lt;span class=&quot;nobr&quot;&gt;Jekyll —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;it has everything you’d need for it: categories, tags, permalinks, generating feeds, etc. And as it’s a &lt;em&gt;generator&lt;/em&gt;, every page is generated just once, on your push to the repo, so it makes it nice for performance and server &lt;span class=&quot;nobr&quot;&gt;load —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;users would get just plain htmls. A lot of people chosen the GitHub as a hosting for their blogs.&lt;/p&gt;
&lt;p&gt;I’ve chosen too. I’ve always had a lot of demands for a static &lt;span class=&quot;nobr&quot;&gt;generators —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;I write in two languages, have a lot of experiments embedded in posts and a lot of other stuff. Jekyll uses &lt;a href=&quot;http://liquidmarkup.org&quot;&gt;Liquid&lt;/a&gt; templating engine. It’s rather simple, but with some guts you could do complex things with it. I’ve dig it a bit and made a lot of small improvements for my &lt;span class=&quot;nobr&quot;&gt;blog —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;there would be at least several articles on that. And maybe someday I’ll refine and rewrite all those things to a state of a standalone project that could be used as a boilerplate for a simple nice and powerful blog with all interesting features included. So, wait for &lt;span class=&quot;nobr&quot;&gt;updates —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;there would be some.&lt;/p&gt;
&lt;h2 id=&quot;prose-io&quot;&gt;Prose.io&lt;/h2&gt;
&lt;p&gt;Ok, so I’m using GitHub, so I can just push the changes to it and they’ll go live. But GitHub have a nice &lt;nobr&gt;&lt;abbr&gt;API&lt;/abbr&gt;&amp;#8202;—&lt;/nobr&gt;&amp;#8202;so there are some web apps that already use it and do a great job with it. One of them is &lt;a href=&quot;http://prose.io&quot;&gt;prose.io&lt;/a&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;and it works really well, I think I’ll write an article or two on it someday. I really liked it.&lt;/p&gt;
&lt;h2 id=&quot;-write-an-article-&quot;&gt;“Write an article”&lt;/h2&gt;
&lt;p&gt;How much times did I say “I’ll write an article on that” already? The point is I came with that New Year’s Resolution: to write at least one article a week after launching the new site. But everything tells me there would be more articles: I have a lot of drafts and ideas to tell and write on.&lt;/p&gt;
&lt;p&gt;So, just wait for it! I’ll try to mix articles on the making of the new version of site with those I have already ideas for or with just anything that would fly there in a front of my eyes.&lt;/p&gt;
&lt;p&gt;I’m not sure about the format of the blog/site, because everything could easily change, but I’m sure it would be fun.&lt;/p&gt;
&lt;h2 id=&quot;markup-amp-design&quot;&gt;Markup &amp;amp; Design&lt;/h2&gt;
&lt;p&gt;As I already &lt;span class=&quot;nobr&quot;&gt;mentioned —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;right now there is only basement for the site that gives me an easy way to write a new article, change any previous one or just play with anything. Everything else is unfinished.&lt;/p&gt;
&lt;p&gt;Markup is in a state of an early prototype, there is almost nothing interesting here. Well, some nice touches are there hopefully, but they are covered with layers of trash. Bad selectors, no continuous code style (the styles are generated from Stylus actually), a lot of copy-and-pasting, extra code and other bad things. Don’t read my &lt;abbr&gt;CSS&lt;/abbr&gt;. All the things that &lt;em&gt;are&lt;/em&gt; nice I’ll mention in all the new shiny posts, so you could just subscribe to the &lt;abbr&gt;RSS&lt;/abbr&gt; or &lt;a href=&quot;https://twitter.com/kizmarh&quot;&gt;follow updates in my twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Design, on the other hand, is almost stable. Yeah, there would be changes and a lot of them, but the whole concept is there.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The Font. I spend a lot of attention to it. There is a lot of the Font: I’ve chosen a big one for body, big enough for me at least. If it seems too big for &lt;span class=&quot;nobr&quot;&gt;you —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;you could reduce it using your browser or just sit farther from the display. I think it’s better to please those who are not that good at looking at small letters than those with eagle eyes.&lt;/p&gt;
&lt;p&gt; Also, the font is serif. The sad part is that my blog is both on English and on &lt;span class=&quot;nobr&quot;&gt;Russian —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;and there are very few good free fonts with cyrillic subset. And a little more paid ones. I’ve chosen to pay. The font is &lt;a href=&quot;http://www.letterhead.ru/Fonts/21cent.html&quot;&gt;“21 cent”&lt;/a&gt; by &lt;a href=&quot;http://www.letterhead.ru&quot;&gt;Letterhead Studio&lt;/a&gt;. Don’t know why, but I really like this font. I bought it from &lt;a href=&quot;http://www.myfonts.com/fonts/letterheadrussia/21-cent/&quot;&gt;myfonts.net&lt;/a&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;it’s nice they have it ’cause almost all other paid font providers are somewhat &lt;span class=&quot;nobr&quot;&gt;greedy —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;I don’t think paying monthly fee for a font is nice.&lt;/p&gt;
&lt;p&gt; The whole font story is really tough and long. You can guess if it would translate into an article someday.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Minimalism. I’ve already mentioned it at &lt;span class=&quot;nobr&quot;&gt;twitter —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;it’s very hard to make a minimalistic textual site and not fall into cloning great &lt;a href=&quot;http://informationarchitects.net&quot;&gt;iA’s site&lt;/a&gt;. Some of the iterations I did for my site were dangerously close to that one. Maybe that’s not that bad after all, but I’ve stopped and tried to find what to do to make my site somehow stand out of similar ones. Minimalistic text-only sites are a trend, so it would be nice if my site would be recognisable in some way. Of course, it’s not finished, but I hope the shape can be seen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Visual features. I’ll certainly write more posts on that, so only briefly now: look at the gamma and colors. I tried to reduce number of plain black and gray colors (and plain white too), using a small tint to everything. Also look at the header and footer (on desktop)&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;I know, it’s not a new effect, but I kinda liked it and wanted to use it there as it perfectly fits into theme. And look at the &lt;span class=&quot;nobr&quot;&gt;links —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;the colors, the visited ones and especially look at the small thingy that can be visible on the underline that appears on hover.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;open-source&quot;&gt;Open Source&lt;/h2&gt;
&lt;p&gt;Despite the rough trashy code inside, the code of this site is on GitHub. Yeah, it’s needed for all this Jekyll magic to work, but there is also another thing: the power of open source. Anyone could go and fix all those awful mistakes I do while writing the posts in English (in a verrry bad English I guess, sorry!)&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;now it’s very easy. Every article on site have two links at the bottom: one for creating an issue on GitHub straight &lt;span class=&quot;nobr&quot;&gt;away —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;so you can point me to any errors or add something to the post, and if you’re that generous, there is a link to the article at prose.&lt;span class=&quot;nobr&quot;&gt;io —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;so you could go and fix it.&lt;/p&gt;
&lt;p&gt;Those actions would be very fast as long as you have GitHub account, so I hope you would use it. Thank you in advance!&lt;/p&gt;
&lt;p&gt;This whole idea on going open source for articles is great, so there would be a lot of articles on that coming.&lt;/p&gt;
&lt;h2 id=&quot;that-s-it-or-tl-dr&quot;&gt;That’s it or tl;dr&lt;/h2&gt;
&lt;p&gt;Ok, so you can see the first post from a list of all those I’ll &lt;span class=&quot;nobr&quot;&gt;write —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;with a new site under them. It’s drafty, broken in a lot of ways and smells inside, but that would change someday. Everything would be better and better and I’ll try to cover all the changes I do either in articles, or just in twitter.&lt;/p&gt;
&lt;p&gt;So, thank you for reading this lengthy post (or scrolling till the end at least). Follow the updates, send pull requests and stay tuned!&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>bemto</title>
    <link href="http://kizu.ru/en/projects/bemto/"/>
    <updated>2012-07-02T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/projects/bemto</id>
    <content type="html">&lt;h1 id=&quot;bemto&quot;&gt;bemto&lt;/h1&gt;
&lt;p&gt;Oh hi. I created this &lt;span class=&quot;nobr&quot;&gt;thing —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;&lt;a href=&quot;https://github.com/kizu/bemto&quot;&gt;bemto&lt;/a&gt;
—&amp;#8202;some mixins for &lt;a href=&quot;https://github.com/visionmedia/jade&quot;&gt;Jade&lt;/a&gt; that makes it easy and fun to write the code in &lt;a href=&quot;http://bem.github.com/bem-method/pages/beginning/beginning.en.html&quot;&gt;&lt;abbr&gt;BEM&lt;/abbr&gt;&lt;/a&gt; notation.&lt;/p&gt;
&lt;p&gt;I really love writing code in bem style and really like Jade, so I though that adding some bem to Jade would be a great little thing that at least I would use a lot. And I hope that it would be helpful to someone else too.&lt;/p&gt;
&lt;p&gt;If you hadn’t already read the &lt;a href=&quot;http://coding.smashingmagazine.com/2012/04/16/a-new-front-end-methodology-bem/&quot;&gt;articles on &lt;abbr&gt;BEM&lt;/abbr&gt;&lt;/a&gt; on SM, or Nicolas Gallaghar’s &lt;a href=&quot;http://nicolasgallagher.com/about-html-semantics-front-end-architecture/&quot;&gt;article on front-end architecture&lt;/a&gt;,&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;go for it! Those articles explain some great ways to write extendable and mainainable code.&lt;/p&gt;
&lt;p&gt;And Jade is the template engine heavily influenced by Haml by &lt;a href=&quot;http://tjholowaychuk.com/&quot;&gt;TJ Holowaychuk&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Long story short: read &lt;a href=&quot;https://github.com/kizu/bemto#readme&quot;&gt;the readme of the project&lt;/a&gt; for more details. Especially look at &lt;a href=&quot;https://github.com/kizu/bemto/blob/master/README.md#using-for-building-complex-mixins&quot;&gt;the extended use-case&lt;/a&gt;&lt;span class=&quot;nobr&quot;&gt; —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;it shows how you can use bemto to create reusable and &lt;span class=&quot;nobr&quot;&gt;easy-to&lt;/span&gt;-use blocks.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Legends and Headings</title>
    <link href="http://kizu.ru/en/fun/legends-and-headings/"/>
    <updated>2012-04-27T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/fun/legends-and-headings</id>
    <content type="html">&lt;h1 id=&quot;legends-and-headings&quot;&gt;Legends and Headings&lt;/h1&gt;
&lt;p&gt;One day in the last december I tried to find out what we can do with the &lt;code&gt;legend&lt;/code&gt; element. I wanted to move it in the fieldset’s frame, and didn’t want to style it out ’cause the fieldsets with legend have this special behavior: the fieldset’s border gets the gap for the legend to fit in.&lt;/p&gt;
&lt;p&gt;So, I made some tricks to emulate different behaviors: move the legend to the right, center or even make visually two legends in one fieldset.&lt;/p&gt;
&lt;p&gt;The easiest part is the positioning of the legend to the right: use the &lt;code&gt;direction: rtl&lt;/code&gt; and the position of the legend would adjuct accordingly. And don’t forget to bring back the &lt;code&gt;ltr&lt;/code&gt; direction on the child elements.&lt;/p&gt;
&lt;p&gt;For the centered and the double one I used a hack with extra elements and stretched legend. There could be pseudos instead of some extra elements, but there were some bugs with them there, so I just used the extras here. Of course it’s not that «fair», but you can style it so it would look like borders, so… Here is a dabblet with those fieldsets and legends:&lt;/p&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/fun/legends-and-headings/#Demo_legends&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And there is a simplier demo of the headings with rulers on the sides. The main point is to use only one element and to make the borders somewhat «fair», so if there would be a background, there would be visual gaps. Other similar methods I saw used the fake background on the centered item to cover the line under it.&lt;/p&gt;
&lt;p&gt;It’s sad that you can’t do multiline variant using only one &lt;span class=&quot;nobr&quot;&gt;element —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;so in that case there is one extra span. In other cases there is only the header and the &lt;span class=&quot;nobr&quot;&gt;pseudos —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;and it must degrade gracefully. So here is it’s dabblet:&lt;/p&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/fun/legends-and-headings/#Demo_headings&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Scrolling shadows</title>
    <link href="http://kizu.ru/en/fun/shadowscroll/"/>
    <updated>2012-04-21T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/fun/shadowscroll</id>
    <content type="html">&lt;h1 id=&quot;scrolling-shadows&quot;&gt;Scrolling shadows&lt;/h1&gt;
&lt;p&gt;Here’s an old idea, but recreated with pure &lt;abbr&gt;CSS&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;Originally, I had an extra wrapper and two extra pseudo-elements on it. Later I decided to rewrite the code and to use just a single element (by using radial gradients).&lt;/p&gt;
&lt;p&gt;While this method is simple, there are some limitations: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the background must be solid&lt;ul&gt;
&lt;li&gt;however, if you&amp;#39;d try &lt;code&gt;background-attachment: fixed&lt;/code&gt;…)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;there are some positioning issues&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But in most regards this method is rather bulletproof. &lt;/p&gt;
&lt;p&gt;If you replace the &lt;abbr&gt;CSS&lt;/abbr&gt;-gradients with simple images, this method could work in IE. (It might need a few more small fixes; I didn&amp;#39;t check.)&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;a href=&quot;https://twitter.com/leaverou&quot;&gt;Lea Verou&lt;/a&gt; updated this experiment using the &lt;code&gt;background-attachment: local&lt;/code&gt;. &lt;a href=&quot;http://lea.verou.me/2012/04/background-attachment-local/&quot;&gt;Read about it in her post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/fun/shadowscroll/#Demo_shadowscroll&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Multi-directional hover</title>
    <link href="http://kizu.ru/en/fun/multi-directional-hover/"/>
    <updated>2012-03-19T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/fun/multi-directional-hover</id>
    <content type="html">&lt;h1 id=&quot;multi-directional-hover&quot;&gt;Multi-directional hover&lt;/h1&gt;
&lt;p&gt;Try to hover this block from different directions&lt;/p&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/fun/multi-directional-hover/#Demo_hovers&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>CSS3 convex polygons</title>
    <link href="http://kizu.ru/en/fun/polygons/"/>
    <updated>2011-09-18T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/fun/polygons</id>
    <content type="html">&lt;h1 id=&quot;css3-convex-polygons&quot;&gt;&lt;abbr&gt;CSS&lt;/abbr&gt;3 convex polygons&lt;/h1&gt;
&lt;p&gt;Using, &lt;code&gt;overflow:hidden&lt;/code&gt; and &lt;code&gt;visibility:hidden&lt;/code&gt; for wrappers with &lt;code&gt;visibility:visible&lt;/code&gt; on a last shild, we could do almost any convex masks which would be clickable and hoverable on their areas.&lt;/p&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/fun/polygons/#Demo_polygons&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Text-overflow emulation and gradient overflow</title>
    <link href="http://kizu.ru/en/fun/overflower/"/>
    <updated>2011-03-08T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/fun/overflower</id>
    <content type="html">&lt;h1 id=&quot;text-overflow-emulation-and-gradient-overflow&quot;&gt;Text-overflow emulation and gradient overflow&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;The «overflow» effect is visible only if there is something to hide (so, there wouldn’t be a case when there is an overlayed gradient that hides a part of text, that would be visible whole anyway).&lt;/li&gt;
&lt;li&gt;Also, you can add a &lt;code&gt;title&lt;/code&gt; attribute to a block, that would appear only when something is hidden.&lt;/li&gt;
&lt;li&gt;You can use this method starting from the IE7 (however, I hadn’t optimise it for this experiment, so barely only title would be visible)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Resize the browser’s window to see the switching of overflow effect.&lt;/p&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/fun/overflower/#Demo_overflower&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Filtering elements without JS</title>
    <link href="http://kizu.ru/en/fun/filters/"/>
    <updated>2011-02-06T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/fun/filters</id>
    <content type="html">&lt;h1 id=&quot;filtering-elements-without-js&quot;&gt;Filtering elements without JS&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Colors are just checkboxes.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;nobr&quot;&gt;Shapes —&lt;/span&gt;&lt;span class=&quot;thinsp&quot;&gt; &lt;/span&gt;radiobuttons with an upgrade: you can uncheck once it&amp;#39;s checked.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Just &lt;abbr&gt;CSS&lt;/abbr&gt;, no JS, enjoy!&lt;/p&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/fun/filters/#Demo_filters&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Only modern browsers supported, can be emulated in IE via expressions, but I&amp;#39;m lazy enough not to do it here.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Popups and dropdowns only by CSS</title>
    <link href="http://kizu.ru/en/fun/popups/"/>
    <updated>2011-02-05T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/fun/popups</id>
    <content type="html">&lt;h1 id=&quot;popups-and-dropdowns-only-by-css&quot;&gt;Popups and dropdowns only by &lt;abbr&gt;CSS&lt;/abbr&gt;&lt;/h1&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/fun/popups/#Demo_popups&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Custom CSS3 controls</title>
    <link href="http://kizu.ru/en/fun/controls/"/>
    <updated>2011-02-03T00:00:00+03:00</updated>
    <id>http://kizu.ru/en/fun/controls</id>
    <content type="html">&lt;h1 id=&quot;custom-css3-controls&quot;&gt;Custom &lt;abbr&gt;CSS&lt;/abbr&gt;3 controls&lt;/h1&gt;
&lt;p&gt;Look at the demo &lt;a href=&quot;http://kizu.ru/en/fun/controls/#Demo_controls&quot;&gt;embedded in the post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This experiment features the heavy-css-styled radio-buttons, made without any use of JS using the &lt;code&gt;:checked&lt;/code&gt; pseudo-class. And with somewhat graceful degradation for some old browsers.&lt;/p&gt;
&lt;p&gt;Also, there is some strange non-semantic structure, in which I tried to overcome one old &lt;a href=&quot;http://css-tricks.com/8439-webkit-sibling-bug/&quot;&gt;webkit’s bug&lt;/a&gt;. Since there is a better solution for this problem (using the always-runnng animation), this experiment was useful to me ’cause, you know, it’s always fun to overcome a bug and create something that works as intended. In the further experiments I&amp;#39;d use the animation bug-fix.&lt;/p&gt;
&lt;p&gt;I have a lot of other thoughts for custom inputs, so stay tuned!&lt;/p&gt;

    </content>
  </entry>
</feed>