-
  var lang = document.lang
  var lang_prefix = document.lang == config.defaultLanguage ? '' : document.lang

  var categories = document.categories
  var page_type = 'index'
  var is_post = !!document.categories

  if (is_post) {
    page_type = 'post'
  }

  var is_index = (page_type == 'index')

  var page_class = 'Page_' + page_type

  if (lang) {
    page_class += ' Page_' + lang
  }

  var url = '/' + document.url

  var pages = documents
  if (pages) {
    pages = pages.sort(function(a, b){
      return new Date(b.date) - new Date(a.date)
    })
    pages.map(function(post){
      post.title = post.title || 'no title lol'
      return post
    })
  }

  var posts = pages.filter(function(page) {
    return page.lang == lang && page.categories && (page.relativePath.indexOf('drafts/') <= 0) && (page.relativePath.indexOf('old)') <= 0)
  })

  var next
  var prev

  for (var i = 0; i < posts.length; i++) {
    // Get prev and next posts
    if ('/' + posts[i].url == url) {
      if (i > 0) {
        next = posts[i - 1]
      }
      if (i < (posts.length - 1)) {
        prev = posts[i + 1]
      }
    }
  }

mixin debug()

  .debug#debug
    .debug-content#debug-active
      table
        tr
          th key
          th value
        tr
          td date
          td= document.date
        tr
          td url
          td= url
        tr
          td prev
          td= prev && prev.url
        tr
          td next
          td= next && next.url
        if lang
          tr
            td lang
            td= lang
        if document.availableTranslations
          tr
            td availableTranslations
            td= document.availableTranslations
        if document.thanks_to
          tr
            td thanks_to
            td= document.thanks_to
        if document.categories
          tr
            td categories
            td= document.categories


doctype html
html.Page(class=page_class, lang=lang ? lang : false)

  head
    //- All the important meta stuff
    meta(
      charset="utf-8")
    meta(
      viewport="width=device-width")
    meta(
      http-equiv="X-UA-Compatible",
      content="IE=EmulateIE7,IE=edge")

    //- The title!
    - pageTitle = document.title || "Whatever, no title"
    - pageTitle = pageTitle.replace(/<(?:.|\n)*?>/gm, '');
    title= pageTitle + " — kizu.ru" + (lang == "en" ? "/en" : '')

    //- The link to RSS/Atom
    link(
      rel="alternate",
      type="application/atom+xml",
      title="Atom feed",
      href="http://feeds.feedburner.com/kizu" + (lang == "en" ? "ruen" : ''))

    //- TODO: alternate languages only if page have translation
    //-       make this “have translation” at multilang plugin

    link(
      rel="stylesheet",
      href= "/s/style.css")

  body.Page-Body
    +debug

    header.Page-Header(role="banner")
      h1.Page-Title
        if is_index
          = loc('name')
        else
          a.Page-Title-Link(
            href="/" + lang_prefix
            )= loc('name')

      //- TODO: add links to translation if there are such
      ul.Page-Languages
        //- TODO: add bemto
        //- TODO: add functions for getting the root of the given lang
        if lang == 'en'
          li.Page-Language.is-current(
            data-short="en")
            = loc('in_lang', 'en')
          li.Page-Language
            if document.translations && document.translations.ru
              a.Page-Language-Link(
                data-short="ru",
                href = url.replace('/en/', '/'))
                = loc('in_lang', 'ru')
            else
              a.Page-Language-Link(
                data-short="ru",
                title=loc('no_translation', 'ru'),
                href="/")
                = loc('in_lang', 'ru') + '*'
        else
          li.Page-Language
            if document.translations && document.translations.en
              a.Page-Language-Link(
                data-short="en",
                href = '/en' + url)
                = loc('in_lang', 'en')
            else
              a.Page-Language-Link(
                data-short="en",
                title=loc('no_translation', 'en'),
                href="/en/")
                = loc('in_lang', 'en') + '*'
          li.Page-Language.is-current(
            data-short="ru")
            = loc('in_lang', 'ru')




    if is_post
      article.Page-Content(role="main")
        .LiquidLayout
          .Main.LiquidLayout-Content
            header
              != document.titleHTML
            != document.content
    else
      .Page-Content.Main(role="main")
        if is_index
          -
          if posts
            ul
              - for post in posts
                li
                  a(href=post.url)
                    = post.title

        != document.content

    footer.Page-Footer
      p.Page-Copy
        = "© 2015 " + loc('name') + "."
        a.Link.Link_wrapper.Link_twitter(href="https://twitter.com/" + loc('twitter_name'))
          img.Ico(alt="Twitter", src="http://favicon.yandex.net/favicon/twitter.com", title="Twitter")
          span.Link-Inner
            = loc('twitter_follow')
          = "!"

    script.
      //- Detect Woff2, via filamentgroup/woff2-feature-test and PRs to it
      var supportsWoff2=function(A){if(!("FontFace"in A)||"function"!=typeof A.FontFace)return!1;var t=new FontFace("t",'url( "data:application/font-woff2;base64,d09GMgABAAAAAADcAAoAAAAAAggAAACWAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABk4ALAoUNAE2AiQDCAsGAAQgBSAHIBtvAcieB3aD8wURQ+TZazbRE9HvF5vde4KCYGhiCgq/NKPF0i6UIsZynbP+Xi9Ng+XLbNlmNz/xIBBqq61FIQRJhC/+QA/08PJQJ3sK5TZFMlWzC/iK5GUN40psgqvxwBjBOg6JUSJ7ewyKE2AAaXZrfUB4v+hze37ugJ9d+DeYqiDwVgCawviwVFGnuttkLqIMGivmDg" ) format( "woff2" )',{});return t.load()["catch"](function(){}),"loading"==t.status||"loaded"==t.status}(this);
      /* Lazy loading the fonts */
      var h = document.getElementsByTagName('head')[0];
      var link = document.createElement('link');
      link.href = '/s/extras' + (supportsWoff2 ? '2' : '') + '.css';
      link.type = 'text/css';
      link.rel = 'stylesheet';
      h.appendChild(link);


    script(src='/j/prism.js')


    //- TODO: Lazy loading the fonts
    //- TODO: Metrika
